name: Build, quality and security

on:
  workflow_call:

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
        env:
          NODE_OPTIONS: '--max-old-space-size=10240'

  build:
    runs-on: ubuntu-latest
    env:
      APPLICATION_STAGE: production
      NODE_ENV: production

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'npm'
      - run: npm ci --include=dev
      - run: npm run build

  get_tags:
    runs-on: ubuntu-latest
    outputs:
      tag_chunks: ${{ steps.get-tags.outputs.tag_chunks }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
      - run: npm ci
      - id: get-tags
        run: |
          TAG_CHUNKS=$(npx tsx scripts/get-feature-tags.ts --chunks=3)
          echo "tag_chunks=$TAG_CHUNKS" >> $GITHUB_OUTPUT

  test_specs:
    needs: get_tags
    runs-on: ubuntu-latest
    env:
      APPLICATION_STAGE: test
    strategy:
      fail-fast: false
      matrix:
        tags: ${{ fromJson(needs.get_tags.outputs.tag_chunks) }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'npm'
      - run: npm ci
      - name: Run specs for tags ${{ join(matrix.tags, ', ') }}
        run: |
          TAGS_ARGS=""
          for tag in $(echo '${{ toJson(matrix.tags) }}' | jq -r '.[]'); do
            TAGS_ARGS="$TAGS_ARGS --tags \"$tag\""
          done
          npm run specs -- $TAGS_ARGS --tags "not @NotImplemented"

  test_apps_libraries:
    runs-on: ubuntu-latest
    env:
      APPLICATION_STAGE: test

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'npm'
      - run: npm ci
      - run: npm run test:apps
      - run: npm run test:libraries

  verify_statistics:
    runs-on: ubuntu-latest
    env:
      DATABASE_CONNECTION_STRING: postgres://postgres_admin:postgres_password@localhost:5432/potentiel
      APPLICATION_STAGE: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: package.json
          cache: 'npm'
      - run: npm ci
      - run: npm run build:cli
      - run: npm run up
      - run: npm exec potentiel-cli stats extraire
