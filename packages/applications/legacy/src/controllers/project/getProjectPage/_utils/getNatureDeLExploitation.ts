import { Lauréat } from '@potentiel-domain/projet';

import { Option } from '@potentiel-libraries/monads';
import { Routes } from '@potentiel-applications/routes';
import { Role } from '@potentiel-domain/utilisateur';
import { getLogger } from '@potentiel-libraries/monitoring';
import { IdentifiantProjet } from '@potentiel-domain/projet';
import { mediator } from 'mediateur';
import { AppelOffre } from '@potentiel-domain/appel-offre';
import { checkAutorisationChangement } from './checkLauréat/checkAutorisationChangement';

export type GetNatureDeLExploitationForProjectPage = {
  natureDeLExploitation: {
    type: Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.RawType;
    taux?: number;
  };
  affichage?: {
    labelActions?: string;
    label: string;
    url: string;
  };
};

type Props = {
  identifiantProjet: IdentifiantProjet.ValueType;
  rôle: string;
  règlesChangementPourAppelOffres: AppelOffre.RèglesDemandesChangement['natureDeLExploitation'];
};

export const getNatureDeLExploitation = async ({
  identifiantProjet,
  rôle,
  règlesChangementPourAppelOffres,
}: Props): Promise<GetNatureDeLExploitationForProjectPage | undefined> => {
  try {
    const role = Role.convertirEnValueType(rôle);

    const projection =
      await mediator.send<Lauréat.NatureDeLExploitation.ConsulterNatureDeLExploitationQuery>({
        type: 'Lauréat.NatureDeLExploitation.Query.ConsulterNatureDeLExploitation',
        data: { identifiantProjet: identifiantProjet.formatter() },
      });

    if (Option.isSome(projection)) {
      const natureDeLExploitation = {
        type: projection.natureDeLExploitation.typeNatureDeLExploitation.formatter(),
        taux: projection.natureDeLExploitation.tauxPrévisionnelACI,
      };

      const { peutModifier } = await checkAutorisationChangement<'natureDeLExploitation'>({
        rôle: Role.convertirEnValueType(rôle),
        identifiantProjet,
        règlesChangementPourAppelOffres,
        domain: 'natureDeLExploitation',
      });

      if (peutModifier) {
        return {
          natureDeLExploitation,
          affichage: {
            url: Routes.NatureDeLExploitation.modifier(identifiantProjet.formatter()),
            label: 'Modifier',
            labelActions: "Modifier la nature de l'exploitation",
          },
        };
      }

      return {
        natureDeLExploitation,
      };
    }

    return undefined;
  } catch (error) {
    getLogger().error(error);
    return undefined;
  }
};
