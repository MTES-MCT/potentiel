import { NextFunction, Request, Response } from 'express';
import { ResultAsync } from '../../core/utils';
import { CreateUser, GetUserByEmail, USER_ROLES } from '../../modules/users';
import { getPermissions } from '../../modules/authN';
import { Utilisateur } from '@potentiel-domain/utilisateur';
import { getToken, GetTokenParams } from 'next-auth/jwt';
import NextAuthJwt from 'next-auth/jwt';

type AttachUserToRequestMiddlewareDependencies = {
  getUserByEmail: GetUserByEmail;
  createUser: CreateUser;
};

// The token is generated by next-auth on the SSR app
declare module 'next-auth/jwt' {
  interface JWT extends NextAuthJwt.DefaultJWT {
    idToken?: string;
    accessToken: string;
  }
}

const getAccessToken = async (req: Request) => {
  const token = await getToken({
    req: { cookies: req.cookies } as unknown as GetTokenParams['req'],
  });
  return token?.accessToken;
};

const promisify = <T>(resultAsync: ResultAsync<T, unknown>) =>
  new Promise<T>((resolve, reject) => resultAsync.match(resolve, reject));

const makeAttachUserToRequestMiddleware =
  ({ getUserByEmail, createUser }: AttachUserToRequestMiddlewareDependencies) =>
  async (request: Request, response: Response, next: NextFunction) => {
    if (
      // Theses paths should be prefixed with /static in the future
      request.path.startsWith('/fonts') ||
      request.path.startsWith('/css') ||
      request.path.startsWith('/images') ||
      request.path.startsWith('/scripts') ||
      request.path.startsWith('/main') ||
      request.path.startsWith('/illustrations')
    ) {
      next();
      return;
    }

    const token = await getAccessToken(request);

    if (!token) {
      next();
      return;
    }
    const {
      identifiantUtilisateur: { email },
      role: { nom: role },
      nom: fullName,
    } = Utilisateur.convertirEnValueType(token);
    const getOrCreateUser = async () => {
      const user = await promisify(getUserByEmail(email));
      if (user) return user;
      const createUserArgs = { email, role, fullName };

      const { id } = await promisify(createUser(createUserArgs));
      return { id, ...createUserArgs };
    };
    const user = await getOrCreateUser();
    request.user = {
      ...user,
      accountUrl: `${process.env.KEYCLOAK_SERVER}/realms/${process.env.KEYCLOAK_REALM}/account`,
      permissions: getPermissions(user),
    };

    next();
  };

export { makeAttachUserToRequestMiddleware };
