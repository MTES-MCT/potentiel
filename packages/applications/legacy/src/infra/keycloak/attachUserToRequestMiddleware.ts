import { NextFunction, Request, Response } from 'express';
import { logger, ResultAsync } from '../../core/utils';
import { CreateUser, GetUserByEmail, USER_ROLES } from '../../modules/users';
import { getPermissions } from '../../modules/authN';
import { Utilisateur } from '@potentiel-domain/utilisateur';
import { getToken, GetTokenParams } from 'next-auth/jwt';
import NextAuthJwt from 'next-auth/jwt';

type AttachUserToRequestMiddlewareDependencies = {
  getUserByEmail: GetUserByEmail;
  createUser: CreateUser;
  getAccessToken?: (req: Request) => Promise<string | undefined>;
};

// The token is generated by next-auth on the SSR app
declare module 'next-auth/jwt' {
  interface JWT extends NextAuthJwt.DefaultJWT {
    idToken?: string;
    accessToken: string;
  }
}

const getNextAuthAccessToken = async (req: Request) => {
  try {
    const token = await getToken({
      req: { cookies: req.cookies } as unknown as GetTokenParams['req'],
    });
    return token?.accessToken;
  } catch (e) {
    logger.error('getToken failed');
    logger.error(e);
  }
};

const promisify = <T>(resultAsync: ResultAsync<T, unknown>) =>
  new Promise<T>((resolve, reject) => resultAsync.match(resolve, reject));

const makeAttachUserToRequestMiddleware =
  ({
    getUserByEmail,
    createUser,
    getAccessToken = getNextAuthAccessToken,
  }: AttachUserToRequestMiddlewareDependencies) =>
  async (request: Request, response: Response, next: NextFunction) => {
    if (
      // Theses paths should be prefixed with /static in the future
      request.path.startsWith('/fonts') ||
      request.path.startsWith('/css') ||
      request.path.startsWith('/images') ||
      request.path.startsWith('/scripts') ||
      request.path.startsWith('/main') ||
      request.path.startsWith('/illustrations')
    ) {
      next();
      return;
    }

    const token = await getAccessToken(request);

    if (!token) {
      next();
      return;
    }
    try {
      const {
        identifiantUtilisateur: { email },
        role: { nom: role },
        nom: fullName,
      } = Utilisateur.convertirEnValueType(token);

      const getOrCreateUser = async () => {
        const createUserArgs = { email, role, fullName };
        const user = await promisify(getUserByEmail(email));
        if (user) return { id: user.id, ...createUserArgs };

        const { id } = await promisify(createUser(createUserArgs));
        return { id, ...createUserArgs };
      };
      const user = await getOrCreateUser();

      request.user = {
        ...user,
        accountUrl: `${process.env.KEYCLOAK_SERVER}/realms/${process.env.KEYCLOAK_REALM}/account`,
        permissions: getPermissions(user),
      };
    } catch (e) {
      logger.error('Auth failed');
      logger.error(e);
    }
    next();
  };

export { makeAttachUserToRequestMiddleware };
