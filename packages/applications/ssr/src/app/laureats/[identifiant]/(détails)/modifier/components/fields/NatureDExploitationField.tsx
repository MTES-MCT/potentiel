'use client';

import { useState } from 'react';
import Select from '@codegouvfr/react-dsfr/SelectNext';

import { Lauréat } from '@potentiel-domain/projet';

import { FieldValidationErrors } from '../../ModifierLauréat.form';
import { LinkedValuesButton } from '../LinkedValuesButton';
import { getNatureDeLExploitationTypeLabel } from '../../../../../../_helpers/getNatureDeLExploitationTypeLabel';

type NatureDeLExploitationFieldProps = {
  candidature: Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.RawType | undefined;
  lauréat: Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.RawType | undefined;
  validationErrors: FieldValidationErrors;
};

export const NatureDeLExploitationField = ({
  candidature,
  lauréat,
  validationErrors,
}: NatureDeLExploitationFieldProps) => {
  const [linked, setLinked] = useState(candidature === lauréat);
  const [candidatureValue, setCandidatureValue] = useState(candidature);
  const [lauréatValue, setLauréatValue] = useState(lauréat);

  const onButtonClick = () => {
    setLinked((l) => !l);
    setLauréatValue(candidatureValue);
  };

  const options = Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types.map((type) => ({
    label: getNatureDeLExploitationTypeLabel(type),
    value: type,
  }));

  return (
    <div className="flex flex-row items-center gap-4 w-full">
      <div className="flex-1 font-semibold">Nature de l'exploitation</div>
      <div className="flex-[2] flex px-2">
        <input
          name={`candidature.natureDeLExploitation`}
          type="hidden"
          value={candidatureValue}
          disabled={candidatureValue === candidature}
        />
        <Select
          className="w-full"
          label=""
          state={validationErrors[`candidature.natureDeLExploitation`] ? 'error' : 'default'}
          stateRelatedMessage={validationErrors[`candidature.natureDeLExploitation`]}
          nativeSelectProps={{
            value: candidatureValue,
            required: true,
            'aria-required': true,
            onChange: (ev) => {
              setCandidatureValue(ev.target.value);
              if (linked) {
                setLauréatValue(ev.target.value);
              }
            },
          }}
          options={options}
        />
      </div>
      <div className="flex-[2] flex px-2 ">
        <input
          name={`laureat.natureDeLExploitation`}
          type="hidden"
          value={lauréatValue}
          disabled={lauréatValue === lauréat}
        />
        <Select
          className="w-full "
          style={{ marginBottom: 0 }}
          label=""
          disabled={linked}
          state={validationErrors[`laureat.natureDeLExploitation`] ? 'error' : 'default'}
          stateRelatedMessage={validationErrors[`laureat.natureDeLExploitation`]}
          nativeSelectProps={{
            value: lauréatValue,
            required: true,
            'aria-required': true,
            onChange: (ev) => {
              setLauréatValue(ev.target.value);
            },
          }}
          options={options}
        />
        <LinkedValuesButton
          linked={linked}
          onButtonClick={onButtonClick}
          aDéjàEtéModifié={candidature !== lauréat}
        />
      </div>
    </div>
  );
};
