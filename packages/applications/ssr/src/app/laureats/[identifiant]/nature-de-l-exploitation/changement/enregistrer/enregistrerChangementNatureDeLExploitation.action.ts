'use server';

import { mediator } from 'mediateur';
import * as zod from 'zod';

import { Lauréat } from '@potentiel-domain/projet';
import { Routes } from '@potentiel-applications/routes';

import { FormAction, formAction, FormState } from '@/utils/formAction';
import { withUtilisateur } from '@/utils/withUtilisateur';
import { singleDocument } from '@/utils/zod/document/singleDocument';
import { optionalPercentageSchema } from '@/utils/candidature/schemaBase';
import { NestedKeysForSchema } from '@/utils/candidature';

const schema = zod.object({
  identifiantProjet: zod.string().min(1),
  natureDeLExploitation: zod.object({
    type: zod.enum(Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types),
    taux: optionalPercentageSchema,
  }),
  raison: zod.string().optional(),
  piecesJustificatives: singleDocument({
    acceptedFileTypes: ['application/pdf'],
    optional: true,
  }),
});

export type EnregistrerChangementNatureDeLExploitationFormKeys = NestedKeysForSchema<
  zod.infer<typeof schema>
>;

const action: FormAction<FormState, typeof schema> = async (
  _,
  { identifiantProjet, natureDeLExploitation: { type, taux }, piecesJustificatives, raison },
) =>
  withUtilisateur(async (utilisateur) => {
    const date = new Date().toISOString();

    await mediator.send<Lauréat.NatureDeLExploitation.EnregistrerChangementNatureDeLExploitationUseCase>(
      {
        type: 'Lauréat.NatureDeLExploitation.UseCase.EnregistrerChangement',
        data: {
          identifiantProjetValue: identifiantProjet,
          identifiantUtilisateurValue: utilisateur.identifiantUtilisateur.formatter(),
          dateChangementValue: date,
          pièceJustificativeValue: piecesJustificatives,
          natureDeLExploitationValue: {
            typeNatureDeLExploitation: type,
            tauxPrévisionnelACI: taux,
          },
          raisonValue: raison,
        },
      },
    );

    return {
      status: 'success',
      redirection: {
        url: Routes.NatureDeLExploitation.changement.détails(identifiantProjet, date),
        message: "Votre changement de nature d'exploitation a bien été enregistré.",
      },
    };
  });

export const enregistrerChangementNatureDeLExploitationAction = formAction(action, schema);
