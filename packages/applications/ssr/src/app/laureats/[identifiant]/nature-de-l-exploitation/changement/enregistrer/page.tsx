import { mediator } from 'mediateur';
import { Metadata } from 'next';
import { notFound } from 'next/navigation';

import { Option } from '@potentiel-libraries/monads';
import { IdentifiantProjet, Lauréat } from '@potentiel-domain/projet';
import { mapToPlainObject } from '@potentiel-domain/core';

import { decodeParameter } from '@/utils/decodeParameter';
import { IdentifiantParameter } from '@/utils/identifiantParameter';
import { PageWithErrorHandling } from '@/utils/PageWithErrorHandling';
import { vérifierQueLeCahierDesChargesPermetUnChangement } from '@/app/_helpers/vérifierQueLeCahierDesChargesPermetUnChangement';

import { EnregistrerChangementNatureDeLExploitationPage } from './EnregistrerChangementNatureDeLExploitation.page';

export const metadata: Metadata = {
  title: "Changer la nature de l'exploitation du projet - Potentiel",
  description: "Formulaire de changement de nature de l'exploitation du projet",
};

export default async function Page({ params: { identifiant } }: IdentifiantParameter) {
  return PageWithErrorHandling(async () => {
    const identifiantProjet = IdentifiantProjet.convertirEnValueType(decodeParameter(identifiant));

    const natureDeLExploitationActuelle =
      await mediator.send<Lauréat.NatureDeLExploitation.ConsulterNatureDeLExploitationQuery>({
        type: 'Lauréat.NatureDeLExploitation.Query.ConsulterNatureDeLExploitation',
        data: {
          identifiantProjet: identifiantProjet.formatter(),
        },
      });

    if (Option.isNone(natureDeLExploitationActuelle)) {
      return notFound();
    }

    await vérifierQueLeCahierDesChargesPermetUnChangement(
      natureDeLExploitationActuelle.identifiantProjet,
      'information-enregistrée',
      'natureDeLExploitation',
    );

    return (
      <EnregistrerChangementNatureDeLExploitationPage
        identifiantProjet={mapToPlainObject(natureDeLExploitationActuelle.identifiantProjet)}
        natureDeLExploitation={mapToPlainObject(
          natureDeLExploitationActuelle.natureDeLExploitation,
        )}
      />
    );
  });
}
