'use server';

import { mediator } from 'mediateur';
import * as zod from 'zod';

import { Lauréat } from '@potentiel-domain/projet';
import { Routes } from '@potentiel-applications/routes';

import { FormAction, formAction, FormState } from '@/utils/formAction';
import { withUtilisateur } from '@/utils/withUtilisateur';
import { optionalPercentageSchema } from '@/utils/candidature/schemaBase';

const schema = zod.object({
  identifiantProjet: zod.string().min(1),
  natureDeLExploitation: zod.object({
    type: zod.enum(Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types),
    tauxPrevisionnelACI: optionalPercentageSchema,
  }),
});

export type ModifierNatureDeLExploitationFormKeys = keyof zod.infer<typeof schema>;

const action: FormAction<FormState, typeof schema> = async (
  _,
  { identifiantProjet, natureDeLExploitation },
) =>
  withUtilisateur(async (utilisateur) => {
    await mediator.send<Lauréat.NatureDeLExploitation.ModifierNatureDeLExploitationUseCase>({
      type: 'Lauréat.NatureDeLExploitation.UseCase.ModifierNatureDeLExploitation',
      data: {
        identifiantProjetValue: identifiantProjet,
        identifiantUtilisateurValue: utilisateur.identifiantUtilisateur.formatter(),
        dateModificationValue: new Date().toISOString(),
        natureDeLExploitationValue: natureDeLExploitation,
      },
    });

    return {
      status: 'success',
      redirection: {
        url: Routes.Projet.details(identifiantProjet),
        message: "Le changement de nature d'exploitation a été pris en compte",
      },
    };
  });

export const modifierNatureDeLExploitationAction = formAction(action, schema);
