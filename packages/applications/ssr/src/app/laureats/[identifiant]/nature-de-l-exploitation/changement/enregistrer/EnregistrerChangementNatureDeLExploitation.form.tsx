'use client';

import { FC, useState } from 'react';
import Input from '@codegouvfr/react-dsfr/Input';
import Select from '@codegouvfr/react-dsfr/SelectNext';

import { Routes } from '@potentiel-applications/routes';
import { IdentifiantProjet, Lauréat } from '@potentiel-domain/projet';

import { UploadNewOrModifyExistingDocument } from '@/components/atoms/form/document/UploadNewOrModifyExistingDocument';
import { Form } from '@/components/atoms/form/Form';
import { ValidationErrors } from '@/utils/formAction';

import { getNatureDeLExploitationTypeLabel } from '../../../../../_helpers/getNatureDeLExploitationTypeLabel';

import {
  enregistrerChangementNatureDeLExploitationAction,
  EnregistrerChangementNatureDeLExploitationFormKeys,
} from './enregistrerChangementNatureDeLExploitation.action';
import { EnregistrerChangementNatureDeLExploitationPageProps } from './EnregistrerChangementNatureDeLExploitation.page';

export type EnregistrerChangementNatureDeLExploitationFormProps =
  EnregistrerChangementNatureDeLExploitationPageProps;

export const EnregistrerChangementNatureDeLExploitationForm: FC<
  EnregistrerChangementNatureDeLExploitationFormProps
> = ({ identifiantProjet, natureDeLExploitation }) => {
  const [typeValue, setTypeValue] = useState(natureDeLExploitation.typeNatureDeLExploitation.type);
  const [validationErrors, setValidationErrors] = useState<
    ValidationErrors<EnregistrerChangementNatureDeLExploitationFormKeys>
  >({});

  return (
    <Form
      action={enregistrerChangementNatureDeLExploitationAction}
      onValidationError={(validationErrors) => setValidationErrors(validationErrors)}
      actionButtons={{
        submitLabel: 'Confirmer',
        secondaryAction: {
          type: 'back',
          href: Routes.Projet.details(IdentifiantProjet.bind(identifiantProjet).formatter()),
        },
      }}
    >
      <input
        name="identifiantProjet"
        type="hidden"
        value={IdentifiantProjet.bind(identifiantProjet).formatter()}
      />

      <div className="flex flex-col gap-6">
        <Select
          state={validationErrors['natureDeLExploitation.type'] ? 'error' : 'default'}
          stateRelatedMessage={validationErrors['natureDeLExploitation.type']}
          options={Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types.map((type) => ({
            label: getNatureDeLExploitationTypeLabel(type),
            value: type,
          }))}
          label="Type de nature de l'exploitation"
          className="flex-1 w-fit"
          nativeSelectProps={{
            name: 'natureDeLExploitation.type',
            defaultValue: typeValue,
            required: true,
            'aria-required': true,
            onChange: (e) => setTypeValue(e.target.value),
          }}
        />

        {typeValue === 'vente-avec-injection-du-surplus' ? (
          <Input
            state={validationErrors['natureDeLExploitation.taux'] ? 'error' : 'default'}
            stateRelatedMessage={validationErrors['natureDeLExploitation.taux']}
            label="Taux d'autoconsommation individuelle prévisionnel (en pourcentage)"
            className="w-fit"
            nativeInputProps={{
              name: 'natureDeLExploitation.taux',
              defaultValue: natureDeLExploitation.tauxPrévisionnelACI,
              required: true,
              'aria-required': true,
              type: 'number',
              inputMode: 'decimal',
              pattern: '^(100|[1-9]?[0-9])$',
            }}
          />
        ) : null}

        <Input
          textArea
          label="Raison (optionnel)"
          id="raison"
          hintText="Veuillez détailler les raisons ayant conduit au changement."
          nativeTextAreaProps={{
            name: 'raison',
            required: false,
            'aria-required': false,
          }}
          state={validationErrors['raison'] ? 'error' : 'default'}
          stateRelatedMessage={validationErrors['raison']}
        />
        <UploadNewOrModifyExistingDocument
          label="Pièce justificative (optionnel)"
          name="piecesJustificatives"
          required={true}
          formats={['pdf']}
          state={validationErrors['piecesJustificatives'] ? 'error' : 'default'}
          stateRelatedMessage={validationErrors['piecesJustificatives']}
        />
      </div>
    </Form>
  );
};
