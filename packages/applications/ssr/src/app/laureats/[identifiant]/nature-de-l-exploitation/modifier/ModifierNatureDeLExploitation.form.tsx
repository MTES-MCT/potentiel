'use client';

import { FC, useState } from 'react';
import Button from '@codegouvfr/react-dsfr/Button';
import Select from '@codegouvfr/react-dsfr/SelectNext';

import { Routes } from '@potentiel-applications/routes';
import { IdentifiantProjet } from '@potentiel-domain/projet';
import { Lauréat } from '@potentiel-domain/projet';
import { PlainType } from '@potentiel-domain/core';

import { Form } from '@/components/atoms/form/Form';
import { SubmitButton } from '@/components/atoms/form/SubmitButton';
import { ValidationErrors } from '@/utils/formAction';

import { getNatureDeLExploitationTypeLabel } from '../../../../_helpers/getNatureDeLExploitationTypeLabel';

import {
  modifierNatureDeLExploitationAction,
  ModifierNatureDeLExploitationFormKeys,
} from './modifierNatureDeLExploitation.action';

export type ModifierNatureDeLExploitationFormProps =
  PlainType<Lauréat.NatureDeLExploitation.ConsulterNatureDeLExploitationReadModel>;

export const ModifierNatureDeLExploitationForm: FC<ModifierNatureDeLExploitationFormProps> = ({
  identifiantProjet,
  natureDeLExploitation,
}) => {
  const [validationErrors, setValidationErrors] = useState<
    ValidationErrors<ModifierNatureDeLExploitationFormKeys>
  >({});

  return (
    <Form
      action={modifierNatureDeLExploitationAction}
      onValidationError={(validationErrors) => setValidationErrors(validationErrors)}
      actions={
        <>
          <Button
            priority="secondary"
            linkProps={{
              href: Routes.Projet.details(IdentifiantProjet.bind(identifiantProjet).formatter()),
              prefetch: false,
            }}
            iconId="fr-icon-arrow-left-line"
          >
            Retour à la page projet
          </Button>
          <SubmitButton>Modifier</SubmitButton>
        </>
      }
    >
      <input
        name="identifiantProjet"
        type="hidden"
        value={IdentifiantProjet.bind(identifiantProjet).formatter()}
      />

      <Select
        state={validationErrors['natureDeLExploitation'] ? 'error' : 'default'}
        stateRelatedMessage={validationErrors['natureDeLExploitation']}
        options={Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types.map((type) => ({
          label: getNatureDeLExploitationTypeLabel(type),
          value: type,
        }))}
        label="Nature de l'exploitation"
        className="flex-1 w-fit"
        nativeSelectProps={{
          name: 'natureDeLExploitation',
          defaultValue: natureDeLExploitation.type,
          required: true,
          'aria-required': true,
        }}
      />
    </Form>
  );
};
