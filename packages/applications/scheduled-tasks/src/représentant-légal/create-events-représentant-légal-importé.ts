import { writeFile } from 'fs/promises';

import { mediator } from 'mediateur';

import { listProjection } from '@potentiel-infrastructure/pg-projections';
import { Laur√©at, Repr√©sentantL√©gal } from '@potentiel-domain/laureat';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';

import { verifyEnvVariables } from '../_utils/verifyEnvVariables';

verifyEnvVariables(['EVENT_STORE_CONNECTION_STRING']);

Repr√©sentantL√©gal.registerRepr√©sentantL√©galUseCases({
  loadAggregate,
});

(async () => {
  console.info('‚ú® Migration Repr√©sentantL√©galImport√©');

  const laur√©ats = await listProjection<Laur√©at.Laur√©atEntity>('laur√©at');

  type Statistics = {
    current: number;
    total: number;
    imported: Array<string>;
    failed: Array<{
      identifiantProjet: string;
      error: string;
    }>;
  };
  const statistics: Statistics = {
    current: 0,
    total: laur√©ats.items.length,
    imported: [],
    failed: [],
  };

  for (const { identifiantProjet, notifi√©Le } of laur√©ats.items) {
    try {
      console.info(`üîç Processing ${statistics.current++}/${statistics.total}`);
      await mediator.send<Repr√©sentantL√©gal.Repr√©sentantL√©galUseCase>({
        type: 'Laur√©at.Repr√©sentantL√©gal.UseCase.ImporterRepr√©sentantL√©gal',
        data: {
          identifiantProjetValue: identifiantProjet,
          import√©Le: notifi√©Le,
        },
      });
      statistics.imported.push(identifiantProjet);
    } catch (error) {
      statistics.failed.push({
        identifiantProjet,
        error: (error as Error).message,
      });
    }
  }

  if (statistics.failed.length > 0) {
    const failedJson = JSON.stringify(statistics.failed, null, 2);
    await writeFile(`import-repr√©sentant-l√©gal-failed.json`, failedJson);
    console.info('üö® Some failed, see ./logs/import-repr√©sentant-l√©gal-failed.json');
  }

  console.info('‚ú® Done');

  process.exit(0);
})();
