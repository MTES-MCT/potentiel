import { mediator } from 'mediateur';

import {
  AnnulerT√¢chePlanifi√©eCommand,
  ListerT√¢chesPlanifi√©esQuery,
  registerT√¢chePlanifi√©eQuery,
  registerT√¢chePlanifi√©eUseCases,
} from '@potentiel-domain/tache-planifiee';
import { findProjection, listProjection } from '@potentiel-infrastructure/pg-projections';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';
import { Candidature } from '@potentiel-domain/candidature';
import { CandidatureAdapter } from '@potentiel-infrastructure/domain-adapters';
import { Option } from '@potentiel-libraries/monads';
import { Abandon } from '@potentiel-domain/laureat';
import { IdentifiantProjet, StatutProjet } from '@potentiel-domain/common';

registerT√¢chePlanifi√©eUseCases({
  loadAggregate,
});

registerT√¢chePlanifi√©eQuery({
  list: listProjection,
});

Candidature.registerCandidatureQueries({
  find: findProjection,
  r√©cup√©rerProjet: CandidatureAdapter.r√©cup√©rerProjetAdapter,
  r√©cup√©rerProjetsEligiblesPreuveRecanditure:
    CandidatureAdapter.r√©cup√©rerProjetsEligiblesPreuveRecanditureAdapter,
  r√©cup√©rerProjets: CandidatureAdapter.r√©cup√©rerProjetsAdapter,
  list: listProjection,
});

Abandon.registerAbandonQueries({
  find: findProjection,
  list: listProjection,
  r√©cup√©rerIdentifiantsProjetParEmailPorteur: async () => [],
});

(async () => {
  try {
    const t√¢chesPlanifi√©es = await mediator.send<ListerT√¢chesPlanifi√©esQuery>({
      type: 'T√¢che.Query.ListerT√¢chesPlanifi√©es',
      data: { cat√©gorieT√¢che: 'garanties-financi√®res' },
    });

    let t√¢chesAnnul√©es = 0;

    const projetIds = new Set<IdentifiantProjet.RawType>();

    for (const { identifiantProjet, typeT√¢chePlanifi√©e } of t√¢chesPlanifi√©es.items) {
      const projet = await mediator.send<Candidature.ConsulterProjetQuery>({
        type: 'Candidature.Query.ConsulterProjet',
        data: { identifiantProjet: identifiantProjet.formatter() },
      });
      if (Option.isNone(projet)) {
        console.warn(`‚ùå Projet ${identifiantProjet} non trouv√©`);
        continue;
      }

      const statutProjet = StatutProjet.convertirEnValueType(projet.statut);

      if (statutProjet.estClass√©()) {
        continue;
      }

      projetIds.add(identifiantProjet.formatter());

      await mediator.send<AnnulerT√¢chePlanifi√©eCommand>({
        type: 'System.T√¢chePlanifi√©e.Command.AnnulerT√¢chePlanifi√©e',
        data: {
          identifiantProjet,
          typeT√¢chePlanifi√©e,
        },
      });
      console.log(`üì® T√¢che √©choir annul√©e pour le projet ${identifiantProjet.formatter()}`);
      t√¢chesAnnul√©es++;
    }

    console.log(`\nüìä Statistiques`);
    console.log(`\n${projetIds.size} projets concern√©s`);
    console.log(`\n${t√¢chesPlanifi√©es.items.length} t√¢ches √©choir trouv√©es pour : `);
    console.log(`\nü•Å ${t√¢chesAnnul√©es} t√¢ches annul√©es`);

    console.info('\nFin du script ‚ú®');
  } catch (error) {
    console.error(error as Error);
  }

  process.exit(0);
})();
