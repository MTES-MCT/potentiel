import { mediator } from 'mediateur';

import { √âlimin√© } from '@potentiel-domain/elimine';
import { Candidature } from '@potentiel-domain/candidature';
import { findProjection, listProjection } from '@potentiel-infrastructure/pg-projections';
import { Laur√©at } from '@potentiel-domain/laureat';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';
import { Option } from '@potentiel-libraries/monads';
import { AppelOffre } from '@potentiel-domain/appel-offre';
import { Email, IdentifiantProjet } from '@potentiel-domain/common';
import {
  ConsulterUtilisateurQuery,
  registerUtilisateurQueries,
} from '@potentiel-domain/utilisateur';
import {
  listerUtilisateursAdapter,
  r√©cup√©rerUtilisateurAdapter,
  v√©rifierAcc√®sProjetAdapter,
} from '@potentiel-infrastructure/domain-adapters';

Candidature.registerCandidaturesUseCases({ loadAggregate });

registerUtilisateurQueries({
  r√©cup√©rerUtilisateur: r√©cup√©rerUtilisateurAdapter,
  v√©rifierAcc√®sProjet: v√©rifierAcc√®sProjetAdapter,
  listerUtilisateurs: listerUtilisateursAdapter,
});

AppelOffre.registerAppelOffreQueries({
  list: listProjection,
  find: findProjection,
});

const validateurInconnu = {
  fonction: 'fonction inconnue',
  nomComplet: 'nom inconnu',
};

let compteurValidateurInconnu = 0;
let compteurValidateurParD√©fault = 0;
let compteurValidateurIdentifi√© = 0;
let anomalies = 0;

const findValidateur = async (
  notifi√©Par: Email.RawType,
  identifiantProjet: IdentifiantProjet.RawType,
): Promise<AppelOffre.Validateur> => {
  const utilisateur = await mediator.send<ConsulterUtilisateurQuery>({
    type: 'Utilisateur.Query.ConsulterUtilisateur',
    data: {
      identifiantUtilisateur: notifi√©Par,
    },
  });

  if (
    Option.isSome(utilisateur) &&
    utilisateur.email !== 'aopv.dgec@developpement-durable.gouv.fr'
  ) {
    console.log(`‚úÖ Utilisateur identifi√©`, {
      identifiantProjet,
    });
    compteurValidateurIdentifi√©++;
    return {
      fonction: utilisateur.fonction,
      nomComplet: utilisateur.nomComplet,
    };
  }

  const { appelOffre: identifiantAppelOffre, p√©riode: identifiantP√©riode } =
    IdentifiantProjet.convertirEnValueType(identifiantProjet);

  const appelOffres = await mediator.send<AppelOffre.ConsulterAppelOffreQuery>({
    type: 'AppelOffre.Query.ConsulterAppelOffre',
    data: { identifiantAppelOffre },
  });

  if (Option.isNone(appelOffres)) {
    console.warn(`‚ùå Appel d'offre non trouv√©`, {
      identifiantProjet,
    });
    anomalies++, compteurValidateurInconnu++;
    return validateurInconnu;
  }

  const p√©riode = appelOffres.periodes.find((x) => x.id === identifiantP√©riode);

  if (!p√©riode) {
    console.warn(`‚ùå P√©riode non trouv√©e`, {
      identifiantProjet,
    });
    anomalies++, compteurValidateurInconnu++;
    return validateurInconnu;
  }

  if (!p√©riode.type || p√©riode.type == 'notified') {
    console.log(`ü§ì Validateur par d√©faut identifi√©`, {
      identifiantProjet,
    });
    compteurValidateurParD√©fault++;
    return {
      fonction: p√©riode.validateurParD√©faut.fonction,
      nomComplet: p√©riode.validateurParD√©faut.nomComplet,
    };
  }

  console.warn(`‚ùì La p√©riode est une p√©riode legacy, un validateur inconnu sera ajout√©`, {
    identifiantProjet,
  });

  compteurValidateurInconnu++;
  return validateurInconnu;
};

(async () => {
  console.log('‚ú® Migration Candidature Notifi√©e');

  const laur√©ats = await listProjection<Laur√©at.Laur√©atEntity>('laur√©at');
  const √©limin√©s = await listProjection<√âlimin√©.√âlimin√©Entity>('√©limin√©');

  const all = [...laur√©ats.items, ...√©limin√©s.items];

  console.log(`‚ÑπÔ∏è ${all.length} √©l√©ments trouv√©s`);

  for (const { identifiantProjet, notifi√©Le, notifi√©Par } of all) {
    console.log(`Looking for the Validateur of ${identifiantProjet}`);

    const validateurValue = await findValidateur(notifi√©Par, identifiantProjet);

    console.log(`Publish NotifierCandidature pour ${identifiantProjet}`);

    const format = 'application/pdf';

    await mediator.publish<Candidature.NotifierCandidatureUseCase>({
      type: 'Candidature.UseCase.NotifierCandidature',
      data: {
        identifiantProjetValue: identifiantProjet,
        attestationValue: { format },
        notifi√©eLeValue: notifi√©Le,
        notifi√©eParValue: notifi√©Par,
        validateurValue,
      },
    });
  }

  console.log(`üöÄ Ex√©cution termin√©e pour ${all.length} laur√©ats et √©limin√©s`);
  console.log(`‚úÖ Nombre de validateurs identifi√©: ${compteurValidateurIdentifi√©}`);
  console.log(`ü§ì Nombre de validateurs par d√©fault: ${compteurValidateurParD√©fault}`);
  console.log(`üëª Nombre de validateurs inconnus: ${compteurValidateurInconnu}`);
  console.log(`‚ùå Nombre d'anomalies: ${anomalies}`);

  process.exit(0);
})();
