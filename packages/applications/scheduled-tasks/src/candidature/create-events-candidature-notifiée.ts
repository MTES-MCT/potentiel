import { mediator } from 'mediateur';

import { √âlimin√© } from '@potentiel-domain/elimine';
import { Candidature } from '@potentiel-domain/candidature';
import { listProjection } from '@potentiel-infrastructure/pg-projections';
import { Laur√©at } from '@potentiel-domain/laureat';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';
import { Option } from '@potentiel-libraries/monads';
import { AppelOffre } from '@potentiel-domain/appel-offre';
import { Email, IdentifiantProjet } from '@potentiel-domain/common';
import { ConsulterUtilisateurQuery } from '@potentiel-domain/utilisateur';

Candidature.registerCandidaturesUseCases({ loadAggregate });

type Validateur = {
  fonction: string;
  nomComplet: string;
};

const validateurInconnu = {
  fonction: 'fonction inconnue',
  nomComplet: 'nom inconnu',
};

let compteurValidateurInconnu = 0;

const findValidateur = async (
  notifi√©Par: Email.RawType,
  identifiantProjet: IdentifiantProjet.RawType,
): Promise<Validateur> => {
  const utilisateur = await mediator.send<ConsulterUtilisateurQuery>({
    type: 'Utilisateur.Query.ConsulterUtilisateur',
    data: {
      identifiantUtilisateur: notifi√©Par,
    },
  });

  if (Option.isNone(utilisateur)) {
    console.warn(`Utilisateur non trouv√©`, {
      identifiantProjet,
      identifiantUtilisateur: notifi√©Par,
    });
  }

  const { appelOffre: identifiantAppelOffre, p√©riode: identifiantP√©riode } =
    IdentifiantProjet.convertirEnValueType(identifiantProjet);

  const appelOffres = await mediator.send<AppelOffre.ConsulterAppelOffreQuery>({
    type: 'AppelOffre.Query.ConsulterAppelOffre',
    data: { identifiantAppelOffre },
  });

  if (Option.isNone(appelOffres)) {
    console.warn(`Appel d'offre non trouv√©`, {
      identifiantProjet,
    });
    compteurValidateurInconnu++;
    return validateurInconnu;
  }

  const p√©riode = appelOffres.periodes.find((x) => x.id === identifiantP√©riode);

  if (!p√©riode) {
    console.warn(`P√©riode non trouv√©e`, {
      identifiantProjet,
    });
    compteurValidateurInconnu++;
    return validateurInconnu;
  }

  if (!p√©riode.type || p√©riode.type == 'notified') {
    return {
      fonction: p√©riode.validateurParD√©faut.fonction,
      nomComplet: p√©riode.validateurParD√©faut.fullName,
    };
  }

  console.warn(`La p√©riode est une p√©riode legacy`, {
    identifiantProjet,
  });

  compteurValidateurInconnu++;
  return validateurInconnu;
};

(async () => {
  console.log('‚ú® Migration Candidature Notifi√©e');

  const laur√©ats = await listProjection<Laur√©at.Laur√©atEntity>('laur√©at');
  const √©limin√©s = await listProjection<√âlimin√©.√âlimin√©Entity>('√©limin√©');
  const all = [...laur√©ats.items, ...√©limin√©s.items];

  console.log(`‚ÑπÔ∏è ${all.length} √©l√©ments trouv√©s`);

  for (const { identifiantProjet, attestation, notifi√©Le, notifi√©Par } of all) {
    console.log(`Looking for the Validateur of ${identifiantProjet}`);

    const validateurValue = await findValidateur(notifi√©Par, identifiantProjet);

    console.log(`Publish NotifierCandidature pour ${identifiantProjet}`);

    await mediator.publish<Candidature.NotifierCandidatureUseCase>({
      type: 'Candidature.UseCase.NotifierCandidature',
      data: {
        identifiantProjetValue: identifiantProjet,
        attestationValue: { format: attestation.format },
        notifi√©eLeValue: notifi√©Le,
        notifi√©eParValue: notifi√©Par,
        validateurValue,
      },
    });
  }

  console.log(`üöÄ Ex√©cution termin√©e`);
  console.log(`üëΩ Nombre de validateurs inconnus : ${compteurValidateurInconnu}`);

  process.exit(0);
})();
