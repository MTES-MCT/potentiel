import { mediator } from 'mediateur';

import { √âlimin√© } from '@potentiel-domain/elimine';
import { Candidature } from '@potentiel-domain/candidature';
import { listProjection } from '@potentiel-infrastructure/pg-projections';
import { Laur√©at } from '@potentiel-domain/laureat';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';

Candidature.registerCandidaturesUseCases({ loadAggregate });

(async () => {
  console.log('‚ú® Migration Candidature Notifi√©e');
  const laur√©ats = await listProjection<Laur√©at.Laur√©atEntity>('laur√©at');
  const √©limin√©s = await listProjection<√âlimin√©.√âlimin√©Entity>('√©limin√©');
  const all = [...laur√©ats.items, ...√©limin√©s.items];

  console.log(`‚ÑπÔ∏è ${all.length} √©l√©ments trouv√©s`);

  for (const { identifiantProjet, attestation, notifi√©Le, notifi√©Par } of all) {
    console.log(`Publish NotifierCandidature pour ${identifiantProjet}`);
    await mediator.publish<Candidature.NotifierCandidatureUseCase>({
      type: 'Candidature.UseCase.NotifierCandidature',
      data: {
        identifiantProjetValue: identifiantProjet,
        attestationValue: { format: attestation.format },
        notifi√©LeValue: notifi√©Le,
        notifi√©ParValue: notifi√©Par,
      },
    });
  }

  console.log(`üöÄ Ex√©cution termin√©e`);

  process.exit(0);
})();
