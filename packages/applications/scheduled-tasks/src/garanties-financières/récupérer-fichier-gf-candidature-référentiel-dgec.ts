import { readdir, writeFile, readFile } from 'node:fs/promises';
import path from 'path';

import { encode, decode } from 'iconv-lite';
import chardet from 'chardet';
import { mediator } from 'mediateur';

import { Option } from '@potentiel-libraries/monads';
import { DateTime, Email, IdentifiantProjet } from '@potentiel-domain/common';
import { GarantiesFinanci√®res } from '@potentiel-domain/laureat';
import { findProjection, listProjection } from '@potentiel-infrastructure/pg-projections';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';
import {
  registerDocumentProjetCommand,
  registerDocumentProjetQueries,
} from '@potentiel-domain/document';
import {
  CandidatureAdapter,
  DocumentAdapter,
  r√©cup√©rerIdentifiantsProjetParEmailPorteurAdapter,
} from '@potentiel-infrastructure/domain-adapters';
import { Candidature } from '@potentiel-domain/candidature';
import { P√©riode } from '@potentiel-domain/periode';

[
  'DIRECTORY_PATH',
  'EVENT_STORE_CONNECTION_STRING',
  'AWS_ACCESS_KEY_ID',
  'AWS_SECRET_ACCESS_KEY',
  'S3_ENDPOINT',
  'S3_BUCKET',
].forEach((varName) => {
  if (!process.env[varName]) {
    console.error(`La variable d'environnement ${varName} n'est pas d√©finie.`);
    process.exit(1);
  }
});

P√©riode.registerP√©riodeQueries({
  find: findProjection,
  list: listProjection,
});

Candidature.registerCandidatureQueries({
  find: findProjection,
  list: listProjection,
  r√©cup√©rerProjet: CandidatureAdapter.r√©cup√©rerProjetAdapter,
  r√©cup√©rerProjets: CandidatureAdapter.r√©cup√©rerProjetsAdapter,
  r√©cup√©rerProjetsEligiblesPreuveRecanditure:
    CandidatureAdapter.r√©cup√©rerProjetsEligiblesPreuveRecanditureAdapter,
});

GarantiesFinanci√®res.registerGarantiesFinanci√®resUseCases({
  loadAggregate,
});

GarantiesFinanci√®res.registerGarantiesFinanci√®resQueries({
  find: findProjection,
  list: listProjection,
  r√©cup√©rerIdentifiantsProjetParEmailPorteur: r√©cup√©rerIdentifiantsProjetParEmailPorteurAdapter,
});

registerDocumentProjetCommand({
  enregistrerDocumentProjet: DocumentAdapter.t√©l√©verserDocumentProjet,
  d√©placerDossierProjet: DocumentAdapter.d√©placerDossierProjet,
  archiverDocumentProjet: DocumentAdapter.archiverDocumentProjet,
});

registerDocumentProjetQueries({
  r√©cup√©rerDocumentProjet: DocumentAdapter.t√©l√©chargerDocumentProjet,
});

const formatFileName = (id: string) =>
  id
    .replace(/PPE2 - Autoconsommation meÃÅtrople/, 'PPE2 - Autoconsommation m√©tropole')
    .replace(/PPE2 - Innovant/, 'PPE2 - Innovation')
    .replace(/PPE2 - BaÃÇtiment/, 'PPE2 - B√¢timent'); // Je comprends pas pourquoi je suis oblig√© de faire √ßa

const detectAndConvertEncoding = (fileName: string) => {
  // D√©tecter l'encodage de la cha√Æne
  const detectedEncoding = chardet.detect(Buffer.from(fileName));

  if (!detectedEncoding) {
    throw new Error("Impossible de d√©tecter l'encodage");
  }

  // Convertir la cha√Æne en utf-8
  const buffer = encode(fileName, detectedEncoding);
  const decodedStr = decode(buffer, 'utf-8');

  return decodedStr;
};

const delay = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

(async () => {
  const directoryPath = process.env.DIRECTORY_PATH!;
  const dirrents = await readdir(directoryPath, {
    withFileTypes: true,
  });

  type Statistics = {
    projetInconnu: {
      count: number;
      ids: Array<string>;
    };
    attestationAjout√©e: number;
    gfCr√©eEtAttestationAjout√©e: number;
    attestationExistante: number;
  };
  const statistics: Statistics = {
    projetInconnu: {
      count: 0,
      ids: [],
    },
    attestationAjout√©e: 0,
    gfCr√©eEtAttestationAjout√©e: 0,
    attestationExistante: 0,
  };

  const format = 'application/pdf';
  const { items: p√©riodes } = await mediator.send<P√©riode.ListerP√©riodesQuery>({
    type: 'P√©riode.Query.ListerP√©riodes',
    data: {},
  });

  for (const file of dirrents) {
    try {
      await delay(50);

      if (!file.isFile() || path.extname(file.name).toLowerCase() !== '.pdf') {
        console.log(`‚ùå Fichier ${file.name} non pris en charge`);
        continue;
      }

      const formattedFileName = formatFileName(
        path.basename(detectAndConvertEncoding(file.name), '.pdf'),
      );

      console.log(`\n\nüìÇ ${formattedFileName}`);

      const identifiantProjet = IdentifiantProjet.convertirEnValueType(formattedFileName);

      const projet = await mediator.send<Candidature.ConsulterProjetQuery>({
        type: 'Candidature.Query.ConsulterProjet',
        data: {
          identifiantProjet: identifiantProjet.formatter(),
        },
      });

      if (Option.isNone(projet)) {
        console.log(`‚ùå ${identifiantProjet.formatter()} : Projet inconnu`);
        statistics.projetInconnu.count++;
        statistics.projetInconnu.ids.push(identifiantProjet.formatter());
        continue;
      }

      const gf = await mediator.send<GarantiesFinanci√®res.ConsulterGarantiesFinanci√®resQuery>({
        type: 'Laur√©at.GarantiesFinanci√®res.Query.ConsulterGarantiesFinanci√®res',
        data: {
          identifiantProjetValue: identifiantProjet.formatter(),
        },
      });

      const filePath = path.join(directoryPath, file.name);
      const fileBuffer = await readFile(filePath);
      const content = new ReadableStream({
        start: async (controller) => {
          controller.enqueue(fileBuffer);
          controller.close();
        },
      });
      const enregistr√©ParValue = Email.convertirEnValueType(
        'aopv.dgec@developpement-durable.gouv.fr',
      ).formatter();

      if (Option.isSome(gf)) {
        if (gf.garantiesFinanci√®res.attestation) {
          console.log(
            `‚ÑπÔ∏è ${identifiantProjet.formatter()} (${projet.nom}) : Le projet a d√©j√† une attestation`,
          );
          statistics.attestationExistante++;
          continue;
        }

        const dateConstitutionValue = DateTime.convertirEnValueType(
          gf.garantiesFinanci√®res.dateConstitution?.formatter() ?? DateTime.now().formatter(),
        ).formatter();

        await mediator.send<GarantiesFinanci√®res.EnregistrerAttestationGarantiesFinanci√®resUseCase>(
          {
            type: 'Laur√©at.GarantiesFinanci√®res.UseCase.EnregistrerAttestation',
            data: {
              identifiantProjetValue: identifiantProjet.formatter(),
              dateConstitutionValue,
              attestationValue: {
                content,
                format,
              },
              enregistr√©LeValue: DateTime.now().formatter(),
              enregistr√©ParValue,
            },
          },
        );
        statistics.attestationAjout√©e++;
        console.log(
          `üìù ${identifiantProjet.formatter()} (${projet.nom}) : Attestation ajout√©e aux garanties financi√®res existante`,
        );
        continue;
      }

      const p√©riode = p√©riodes.find(
        (p√©riode) =>
          p√©riode.identifiantP√©riode.appelOffre === identifiantProjet.appelOffre &&
          p√©riode.identifiantP√©riode.p√©riode === identifiantProjet.p√©riode,
      );

      if (!p√©riode) {
        console.log(`‚ùå ${identifiantProjet.formatter()} (${projet.nom}) : P√©riode non trouv√©e`);
        continue;
      }

      if (!p√©riode.estNotifi√©e || !p√©riode.notifi√©eLe) {
        console.log(`‚ùå ${identifiantProjet.formatter()} (${projet.nom}) : P√©riode non notifi√©e`);
        continue;
      }

      await mediator.send<GarantiesFinanci√®res.EnregistrerGarantiesFinanci√®resUseCase>({
        type: 'Laur√©at.GarantiesFinanci√®res.UseCase.EnregistrerGarantiesFinanci√®res',
        data: {
          identifiantProjetValue: identifiantProjet.formatter(),
          typeValue: Candidature.TypeGarantiesFinanci√®res.typeInconnu.type,
          dateConstitutionValue: p√©riode.notifi√©eLe.formatter(),
          attestationValue: {
            content,
            format: 'application/pdf',
          },
          enregistr√©LeValue: DateTime.now().formatter(),
          enregistr√©ParValue,
        },
      });

      statistics.gfCr√©eEtAttestationAjout√©e++;
      console.log(
        `üçÄ ${identifiantProjet.formatter()} (${projet.nom}) : Garanties financi√®res cr√©√©e avec l'attestation`,
      );
    } catch (e) {
      console.error(e);
      process.exit(1);
    }
  }

  console.log('\n\nStatistiques :');
  console.log(`Nombre de projets concern√©s : ${dirrents.length}`);
  console.log(
    `Nombre de projets inconnu dans potentiel : ${statistics.projetInconnu.count} / ${dirrents.length}`,
  );
  console.log(
    `Nombre d'attestation ajout√©es √† des gfs existante : ${statistics.attestationAjout√©e} / ${dirrents.length}`,
  );
  console.log(
    `Nombre de gf cr√©es avec attestation : ${statistics.gfCr√©eEtAttestationAjout√©e} / ${dirrents.length}`,
  );
  console.log(
    `Nombre d'attestation d√©j√† existante : ${statistics.attestationExistante} / ${dirrents.length}`,
  );

  if (statistics.projetInconnu.ids.length) {
    await writeFile('projets-non-trouv√©s.txt', statistics.projetInconnu.ids.join('\n'));
  }

  process.exit(0);
})();
