import { mediator } from 'mediateur';
import { getLogger } from '@potentiel-libraries/monitoring';
import {
  GestionnaireR√©seau,
  Raccordement,
  registerR√©seauQueries,
  registerR√©seauUseCases,
} from '@potentiel-domain/reseau';
import { listerProjetForOreAdapter } from '@potentiel-infrastructure/domain-adapters';
import { loadAggregate } from '@potentiel-infrastructure/pg-event-sourcing';
import {
  findProjection,
  listProjection,
  listProjectionV2,
} from '@potentiel-infrastructure/pg-projections';
import { r√©cup√©rerGRDParVille } from '@potentiel-infrastructure/ore-client';
import { Option } from '@potentiel-libraries/monads';

registerR√©seauUseCases({
  loadAggregate,
});

registerR√©seauQueries({
  list: listProjection,
  listV2: listProjectionV2,
  find: findProjection,
});

(async () => {
  getLogger().info('Lancement du script...');

  try {
    const projetsClass√© = await listerProjetForOreAdapter();
    const projetsClass√©Identifiants = projetsClass√©.map((p) => p.identifiantProjet);

    const raccordements = await mediator.send<Raccordement.ListerRaccordementQuery>({
      type: 'R√©seau.Raccordement.Query.ListerRaccordement',
      data: {},
    });

    const raccordementsDeProjetsClass√©s = raccordements.items.filter((raccordement) =>
      projetsClass√©Identifiants.includes(raccordement.identifiantProjet.formatter()),
    );

    getLogger().info(`${raccordementsDeProjetsClass√©s.length} raccordements √† v√©rifier`);

    let nombreDeRaccordementsMisAJour = 0;

    for (const raccordement of raccordementsDeProjetsClass√©s) {
      const identifiantProjet = raccordement.identifiantProjet.formatter();
      const identifiantActuelGestionnaireR√©seau =
        raccordement.identifiantGestionnaireR√©seau.formatter();

      const relatedProjet = projetsClass√©.find(
        (projet) => projet.identifiantProjet === identifiantProjet,
      );

      // ce cas est d√©j√† v√©rifi√© ci dessus mais typescript est restrictif
      if (!relatedProjet) {
        getLogger().warn(`Il n'y a pas de projet class√© li√© √† ce raccordement`);
        continue;
      }

      const nouveauGestionnaireR√©seau = await r√©cup√©rerGRDParVille({
        codePostal: relatedProjet.localit√©.codePostal,
        commune: relatedProjet.localit√©.commune,
      });

      if (Option.isNone(nouveauGestionnaireR√©seau)) {
        continue;
      }

      if (nouveauGestionnaireR√©seau.codeEIC === identifiantActuelGestionnaireR√©seau) {
        getLogger().info(
          `üí™ Le gestionnaire r√©seau actuellement reli√© au projet ${raccordement.identifiantProjet.formatter} est le m√™me que celui de ORE`,
        );
        continue;
      }

      // additional check
      const gestionnaireProjection =
        await mediator.send<GestionnaireR√©seau.ConsulterGestionnaireR√©seauQuery>({
          type: 'R√©seau.Gestionnaire.Query.ConsulterGestionnaireR√©seau',
          data: {
            identifiantGestionnaireR√©seau: nouveauGestionnaireR√©seau.codeEIC,
          },
        });

      if (Option.isNone(gestionnaireProjection)) {
        getLogger().warn(
          `Le gestionnaire ${nouveauGestionnaireR√©seau.raisonSociale} n'existe pas en base de donn√©es`,
        );
        continue;
      }

      try {
        await mediator.send<Raccordement.RaccordementUseCase>({
          type: 'R√©seau.Raccordement.UseCase.ModifierGestionnaireR√©seauRaccordement',
          data: {
            identifiantProjetValue: identifiantProjet,
            identifiantGestionnaireR√©seauValue: nouveauGestionnaireR√©seau.codeEIC,
          },
        });

        nombreDeRaccordementsMisAJour++;

        getLogger().info(
          `‚úÖ Gestionnaire ${nouveauGestionnaireR√©seau.raisonSociale} attribu√© au projet ${identifiantProjet}`,
        );
      } catch (error) {
        getLogger().error(error as Error);
        continue;
      }
    }

    const pourcentageRaccordementMisAJour = Math.round(
      (nombreDeRaccordementsMisAJour / raccordementsDeProjetsClass√©s.length) * 100,
    );

    getLogger().info(
      `Sur ${raccordementsDeProjetsClass√©s.length} raccordements, nous avons mis √† jour ${pourcentageRaccordementMisAJour} % d'entre eux`,
    );

    getLogger().info('Fin du script ‚ú®');

    process.exit(0);
  } catch (error) {
    getLogger().error(error as Error);
  }
})();
