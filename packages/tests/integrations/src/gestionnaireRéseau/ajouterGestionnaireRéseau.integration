import { loadAggregate, publish, subscribe } from '@potentiel/pg-event-sourcing';
import { executeQuery } from '@potentiel/pg-helpers';
import {
  ajouterGestionnaireRéseauCommandHandlerFactory,
  consulterGestionnaireRéseauQueryHandlerFactory,
  createGestionnaireRéseauAggregateId,
  GestionnaireRéseauAjoutéEvent,
  gestionnaireRéseauAjoutéHandlerFactory,
  GestionnaireRéseauDéjàExistantError,
} from '@potentiel/domain';
import { findProjection } from '@potentiel/pg-projections';
import waitForExpect from 'wait-for-expect';
import { Unsubscribe } from '@potentiel/core-domain';
import { createProjection } from '@potentiel/pg-projections/dist/createProjection';

describe(`Ajouter un gestionnaire de réseau`, () => {
  
  it(`Etant donné un gestionnaire de réseau
      Lorsqu'un admin ajoute un gestionnaire ayant le même code EIC
      Alors le gestionnaire de réseau ne devrait pas être ajouté
      Et l'admin devrait être informé que le gestionnaire existe déjà`, async () => {
    await publish(createGestionnaireRéseauAggregateId(codeEIC), {
      type: 'GestionnaireRéseauAjouté',
      payload: {
        codeEIC,
        raisonSociale: 'RTE',
      },
    });

    const ajouterGestionnaireRéseau = ajouterGestionnaireRéseauCommandHandlerFactory({
      publish,
      loadAggregate,
    });

    const promise = ajouterGestionnaireRéseau({
      codeEIC,
      raisonSociale: 'ENEDIS',
      aideSaisieRéférenceDossierRaccordement: { format: '', légende: '' },
    });

    // Assert
    await expect(promise).rejects.toThrow(GestionnaireRéseauDéjàExistantError);
  });
});
