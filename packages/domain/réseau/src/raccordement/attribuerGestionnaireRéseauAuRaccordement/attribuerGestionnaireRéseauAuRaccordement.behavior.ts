import { IdentifiantProjet } from '@potentiel-domain/common';
import { DomainEvent } from '@potentiel-domain/core';
import { RaccordementAggregate } from '../raccordement.aggregate';
import { IdentifiantGestionnaireR√©seau } from '../../gestionnaire';
import { RaccordementD√©j√†ExistantError } from '../raccordementD√©j√†ExistantError';

export type GestionnaireR√©seauAttribu√©AuRaccordementEvent = DomainEvent<
  'GestionnaireR√©seauAttribu√©AuRaccordement-V1',
  {
    identifiantGestionnaireR√©seau: IdentifiantGestionnaireR√©seau.RawType;
    identifiantProjet: IdentifiantProjet.RawType;
  }
>;

export type AttribuerGestionnaireR√©seauAuRaccordementOptions = {
  identifiantGestionnaireR√©seau: IdentifiantGestionnaireR√©seau.RawType;
  identifiantProjet: IdentifiantProjet.RawType;
};

export async function attribuerGestionnaireR√©seauAuRaccordement(
  this: RaccordementAggregate,
  {
    identifiantGestionnaireR√©seau,
    identifiantProjet,
  }: AttribuerGestionnaireR√©seauAuRaccordementOptions,
) {
  const raccordementD√©j√†ExistantPourLeProjet = this.identifiantProjet.est√âgale√Ä(
    IdentifiantProjet.convertirEnValueType(identifiantProjet),
  );

  if (raccordementD√©j√†ExistantPourLeProjet) {
    console.log('ü§° COUCOU');
    throw new RaccordementD√©j√†ExistantError(identifiantProjet);
  }

  const event: GestionnaireR√©seauAttribu√©AuRaccordementEvent = {
    type: 'GestionnaireR√©seauAttribu√©AuRaccordement-V1',
    payload: {
      identifiantGestionnaireR√©seau,
      identifiantProjet,
    },
  };

  await this.publish(event);
}

export function applyAttribuerGestionnaireR√©seauAuRaccordementEventV1(
  this: RaccordementAggregate,
  {
    payload: { identifiantGestionnaireR√©seau, identifiantProjet },
  }: GestionnaireR√©seauAttribu√©AuRaccordementEvent,
) {
  this.identifiantProjet = IdentifiantProjet.convertirEnValueType(identifiantProjet);
  this.identifiantGestionnaireR√©seau = IdentifiantGestionnaireR√©seau.convertirEnValueType(
    identifiantGestionnaireR√©seau,
  );
}
