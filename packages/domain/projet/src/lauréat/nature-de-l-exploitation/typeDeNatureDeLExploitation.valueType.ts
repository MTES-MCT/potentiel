import { InvalidOperationError, PlainType, ReadonlyValueType } from '@potentiel-domain/core';

export const types = [
  'vente-avec-injection-du-surplus',
  'vente-avec-injection-en-totalité',
] as const;
export type RawType = (typeof types)[number];

export type ValueType = ReadonlyValueType<{
  type: RawType;
  formatter(): RawType;
  estVenteAvecInjectionDuSurplus(): boolean;
  estVenteAvecInjectionEnTotalité(): boolean;
}>;

export const bind = ({ type }: PlainType<ValueType>): ValueType => {
  estValide(type);
  return {
    type,
    formatter() {
      return this.type;
    },
    estÉgaleÀ(type: ValueType) {
      return this.type === type.type;
    },
    estVenteAvecInjectionDuSurplus() {
      return this.estÉgaleÀ(venteAvecInjectionEnSurplus);
    },
    estVenteAvecInjectionEnTotalité() {
      return this.estÉgaleÀ(venteAvecInjectionEnTotalité);
    },
  };
};

export const convertirEnValueType = (type: string) => {
  estValide(type);
  return bind({ type });
};

function estValide(value: string): asserts value is RawType {
  const isValid = (types as readonly string[]).includes(value);

  if (!isValid) {
    throw new TypeNatureExploitationInvalideError(value);
  }
}

export const venteAvecInjectionEnTotalité = convertirEnValueType(
  'vente-avec-injection-en-totalité',
);
export const venteAvecInjectionEnSurplus = convertirEnValueType('vente-avec-injection-du-surplus');

class TypeNatureExploitationInvalideError extends InvalidOperationError {
  constructor(value: string) {
    super(`Le type de nature d'exploitation ne correspond à aucune valeur connue`, {
      value,
    });
  }
}
