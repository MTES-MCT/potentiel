import { Message, MessageHandler, mediator } from 'mediateur';

import { DateTime, Email } from '@potentiel-domain/common';

import { IdentifiantProjet } from '../../..';
import { TypeDeNatureDeLExploitation } from '..';

import { ModifierNatureDeLExploitationCommand } from './modifierNatureDeLExploitation.command';

export type ModifierNatureDeLExploitationUseCase = Message<
  'Lauréat.NatureDeLExploitation.UseCase.ModifierNatureDeLExploitation',
  {
    identifiantProjetValue: string;
    natureDeLExploitationValue: {
      typeNatureDeLExploitation: string;
      tauxPrévisionnelACI?: number;
    };
    dateModificationValue: string;
    identifiantUtilisateurValue: string;
  }
>;

export const registerModifierNatureDeLExploitationUseCase = () => {
  const runner: MessageHandler<ModifierNatureDeLExploitationUseCase> = async ({
    identifiantProjetValue,
    identifiantUtilisateurValue,
    natureDeLExploitationValue,
    dateModificationValue,
  }) => {
    await mediator.send<ModifierNatureDeLExploitationCommand>({
      type: 'Lauréat.NatureDeLExploitation.Command.ModifierNatureDeLExploitation',
      data: {
        identifiantProjet: IdentifiantProjet.convertirEnValueType(identifiantProjetValue),
        identifiantUtilisateur: Email.convertirEnValueType(identifiantUtilisateurValue),
        typeNatureDeLExploitation: TypeDeNatureDeLExploitation.convertirEnValueType(
          natureDeLExploitationValue.typeNatureDeLExploitation,
        ),
        tauxPrévisionnelACI: natureDeLExploitationValue.tauxPrévisionnelACI,
        dateModification: DateTime.convertirEnValueType(dateModificationValue),
      },
    });
  };
  mediator.register('Lauréat.NatureDeLExploitation.UseCase.ModifierNatureDeLExploitation', runner);
};
