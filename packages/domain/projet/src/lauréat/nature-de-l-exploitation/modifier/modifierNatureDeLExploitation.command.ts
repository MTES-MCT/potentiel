import { Message, MessageHandler, mediator } from 'mediateur';

import { DateTime, Email } from '@potentiel-domain/common';

import { GetProjetAggregateRoot, IdentifiantProjet } from '../../..';
import { TypeDeNatureDeLExploitation } from '..';

export type ModifierNatureDeLExploitationCommand = Message<
  'Lauréat.NatureDeLExploitation.Command.ModifierNatureDeLExploitation',
  {
    identifiantProjet: IdentifiantProjet.ValueType;
    identifiantUtilisateur: Email.ValueType;
    typeDeNatureDeLExploitation: TypeDeNatureDeLExploitation.ValueType;
    tauxPrévisionnelACI?: number;
    dateModification: DateTime.ValueType;
  }
>;

export const registerModifierNatureDeLExploitationCommand = (
  getProjetAggregateRoot: GetProjetAggregateRoot,
) => {
  const handler: MessageHandler<ModifierNatureDeLExploitationCommand> = async (payload) => {
    const projet = await getProjetAggregateRoot(payload.identifiantProjet);
    await projet.lauréat.natureDeLExploitation.modifier(payload);
  };
  mediator.register('Lauréat.NatureDeLExploitation.Command.ModifierNatureDeLExploitation', handler);
};
