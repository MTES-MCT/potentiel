import { match } from 'ts-pattern';

import { AbstractAggregate } from '@potentiel-domain/core';

import { LauréatAggregate } from '../lauréat.aggregate';

import {
  NatureDeLExploitationEvent,
  NatureDeLExploitationModifiéeEvent,
  TypeDeNatureDeLExploitation,
} from '.';

import { ImporterOptions } from './importer/importerNatureDeLExploitation.option';
import { NatureDeLExploitationImportéeEvent } from './importer/importerNatureDeLExploitation.event';
import { ModifierOptions } from './modifier/modifierNatureDeLExploitation.option';
import {
  NatureDeLExploitationDéjàTransmiseError,
  NatureDeLExploitationIdentiqueError,
} from './natureDeLExploitation.error';

export class NatureDeLExploitationAggregate extends AbstractAggregate<
  NatureDeLExploitationEvent,
  'nature-de-l-exploitation',
  LauréatAggregate
> {
  natureDeLExploitation!: TypeDeNatureDeLExploitation.ValueType;

  get lauréat() {
    return this.parent;
  }

  private get identifiantProjet() {
    return this.lauréat.projet.identifiantProjet;
  }

  async importer({ natureDeLExploitation, importéeLe, importéePar }: ImporterOptions) {
    if (this.natureDeLExploitation) {
      throw new NatureDeLExploitationDéjàTransmiseError();
    }

    const event: NatureDeLExploitationImportéeEvent = {
      type: 'NatureDeLExploitationImportée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        natureDeLExploitation: natureDeLExploitation.formatter(),
        importéeLe: importéeLe.formatter(),
        importéePar: importéePar.formatter(),
      },
    };

    await this.publish(event);
  }

  async modifier({
    natureDeLExploitation,
    dateModification,
    identifiantUtilisateur,
  }: ModifierOptions) {
    this.lauréat.vérifierQueLeLauréatExiste();

    if (this.natureDeLExploitation.estÉgaleÀ(natureDeLExploitation)) {
      throw new NatureDeLExploitationIdentiqueError();
    }

    const event: NatureDeLExploitationModifiéeEvent = {
      type: 'NatureDeLExploitationModifiée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        natureDeLExploitation: natureDeLExploitation.formatter(),
        modifiéeLe: dateModification.formatter(),
        modifiéePar: identifiantUtilisateur.formatter(),
      },
    };

    await this.publish(event);
  }

  apply(event: NatureDeLExploitationEvent): void {
    match(event)
      .with(
        {
          type: 'NatureDeLExploitationImportée-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeV1(event),
      )
      .with(
        {
          type: 'NatureDeLExploitationModifiée-V1',
        },
        (event) => this.applyNatureDeLExploitationModifiéeV1(event),
      )
      .exhaustive();
  }

  private applyNatureDeLExploitationImportéeV1({
    payload: { natureDeLExploitation },
  }: NatureDeLExploitationImportéeEvent) {
    this.natureDeLExploitation =
      TypeDeNatureDeLExploitation.convertirEnValueType(natureDeLExploitation);
  }

  private applyNatureDeLExploitationModifiéeV1({
    payload: { natureDeLExploitation: nouvelleNatureDeLExploitation },
  }: NatureDeLExploitationModifiéeEvent) {
    this.natureDeLExploitation = TypeDeNatureDeLExploitation.convertirEnValueType(
      nouvelleNatureDeLExploitation,
    );
  }
}
