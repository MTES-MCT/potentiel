import { match } from 'ts-pattern';

import { AbstractAggregate } from '@potentiel-domain/core';

import { LauréatAggregate } from '../lauréat.aggregate';

import {
  NatureDeLExploitationEvent,
  NatureDeLExploitationModifiéeEvent,
  TypeDeNatureDeLExploitation,
} from '.';

import { ImporterOptions } from './importer/importerNatureDeLExploitation.option';
import { NatureDeLExploitationImportéeEvent } from './importer/importerNatureDeLExploitation.event';
import { ModifierOptions } from './modifier/modifierNatureDeLExploitation.option';
import {
  NatureDeLExploitationDéjàTransmiseError,
  NatureDeLExploitationIdentiqueError,
  TauxPrévisionnelACIRequisError,
} from './natureDeLExploitation.error';

export class NatureDeLExploitationAggregate extends AbstractAggregate<
  NatureDeLExploitationEvent,
  'nature-de-l-exploitation',
  LauréatAggregate
> {
  #typeDeNatureDeLExploitation!: TypeDeNatureDeLExploitation.ValueType;
  #tauxPrévisionnelACI?: number;

  get lauréat() {
    return this.parent;
  }

  private get identifiantProjet() {
    return this.lauréat.projet.identifiantProjet;
  }

  async importer({
    typeDeNatureDeLExploitation,
    tauxPrévisionnelACI,
    importéeLe,
    importéePar,
  }: ImporterOptions) {
    if (this.#typeDeNatureDeLExploitation !== undefined) {
      throw new NatureDeLExploitationDéjàTransmiseError();
    }

    if (
      typeDeNatureDeLExploitation.estÉgaleÀ(
        TypeDeNatureDeLExploitation.venteAvecInjectionEnSurplus,
      ) &&
      tauxPrévisionnelACI === undefined
    ) {
      throw new TauxPrévisionnelACIRequisError();
    }

    const event: NatureDeLExploitationImportéeEvent = {
      type: 'NatureDeLExploitationImportée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        typeDeNatureDeLExploitation: typeDeNatureDeLExploitation.formatter(),
        tauxPrévisionnelACI,
        importéeLe: importéeLe.formatter(),
        importéePar: importéePar.formatter(),
      },
    };

    await this.publish(event);
  }

  async modifier({
    typeDeNatureDeLExploitation,
    tauxPrévisionnelACI,
    dateModification,
    identifiantUtilisateur,
  }: ModifierOptions) {
    this.lauréat.vérifierQueLeLauréatExiste();

    if (
      this.#typeDeNatureDeLExploitation.estÉgaleÀ(typeDeNatureDeLExploitation) &&
      this.#tauxPrévisionnelACI === tauxPrévisionnelACI
    ) {
      throw new NatureDeLExploitationIdentiqueError();
    }

    if (
      typeDeNatureDeLExploitation.estÉgaleÀ(
        TypeDeNatureDeLExploitation.venteAvecInjectionEnSurplus,
      ) &&
      tauxPrévisionnelACI === undefined
    ) {
      throw new TauxPrévisionnelACIRequisError();
    }

    const event: NatureDeLExploitationModifiéeEvent = {
      type: 'NatureDeLExploitationModifiée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        typeDeNatureDeLExploitation: typeDeNatureDeLExploitation.formatter(),
        tauxPrévisionnelACI,
        modifiéeLe: dateModification.formatter(),
        modifiéePar: identifiantUtilisateur.formatter(),
      },
    };

    await this.publish(event);
  }

  apply(event: NatureDeLExploitationEvent): void {
    match(event)
      .with(
        {
          type: 'NatureDeLExploitationImportée-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeOuModifiéeV1(event),
      )
      .with(
        {
          type: 'NatureDeLExploitationModifiée-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeOuModifiéeV1(event),
      )
      .exhaustive();
  }

  private applyNatureDeLExploitationImportéeOuModifiéeV1({
    payload: { typeDeNatureDeLExploitation, tauxPrévisionnelACI },
  }: NatureDeLExploitationImportéeEvent | NatureDeLExploitationModifiéeEvent) {
    this.#typeDeNatureDeLExploitation = TypeDeNatureDeLExploitation.convertirEnValueType(
      typeDeNatureDeLExploitation,
    );
    this.#tauxPrévisionnelACI = tauxPrévisionnelACI;
  }
}
