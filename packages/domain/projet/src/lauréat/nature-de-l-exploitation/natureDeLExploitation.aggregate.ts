import { match } from 'ts-pattern';

import { AbstractAggregate } from '@potentiel-domain/core';

import { LauréatAggregate } from '../lauréat.aggregate';

import {
  NatureDeLExploitationEvent,
  NatureDeLExploitationModifiéeEvent,
  TypeDeNatureDeLExploitation,
} from '.';

import { ImporterOptions } from './importer/importerNatureDeLExploitation.option';
import { NatureDeLExploitationImportéeEvent } from './importer/importerNatureDeLExploitation.event';
import { ModifierOptions } from './modifier/modifierNatureDeLExploitation.option';
import {
  NatureDeLExploitationDéjàTransmiseError,
  NatureDeLExploitationIdentiqueError,
  TauxPrévisionnelACIEnTropError,
  TauxPrévisionnelACIRequisError,
} from './natureDeLExploitation.error';
import { ChangementNatureDeLExploitationEnregistréEvent } from './changement/enregistrerChangement/enregistrerChangementNatureDeLExploitation.event';
import { EnregistrerChangementNatureDeLExploitationOptions } from './changement/enregistrerChangement/enregistrerChangementNatureDeLExploitation.option';

export class NatureDeLExploitationAggregate extends AbstractAggregate<
  NatureDeLExploitationEvent,
  'nature-de-l-exploitation',
  LauréatAggregate
> {
  #typeNatureDeLExploitation!: TypeDeNatureDeLExploitation.ValueType;
  #tauxPrévisionnelACI?: number;

  get lauréat() {
    return this.parent;
  }

  private get identifiantProjet() {
    return this.lauréat.projet.identifiantProjet;
  }

  async importer({
    typeNatureDeLExploitation,
    tauxPrévisionnelACI,
    importéeLe,
    importéePar,
  }: ImporterOptions) {
    if (this.exists) {
      throw new NatureDeLExploitationDéjàTransmiseError();
    }

    this.vérifierLaCohérenceDesDonnées(typeNatureDeLExploitation, tauxPrévisionnelACI);

    const event: NatureDeLExploitationImportéeEvent = {
      type: 'NatureDeLExploitationImportée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        typeNatureDeLExploitation: typeNatureDeLExploitation.formatter(),
        tauxPrévisionnelACI,
        importéeLe: importéeLe.formatter(),
        importéePar: importéePar.formatter(),
      },
    };

    await this.publish(event);
  }

  async modifier({
    typeNatureDeLExploitation,
    tauxPrévisionnelACI,
    dateModification,
    identifiantUtilisateur,
  }: ModifierOptions) {
    this.lauréat.vérifierQueLeLauréatExiste();
    this.vérifierLaCohérenceDesDonnées(typeNatureDeLExploitation, tauxPrévisionnelACI);

    const event: NatureDeLExploitationModifiéeEvent = {
      type: 'NatureDeLExploitationModifiée-V1',
      payload: {
        identifiantProjet: this.identifiantProjet.formatter(),
        typeNatureDeLExploitation: typeNatureDeLExploitation.formatter(),
        tauxPrévisionnelACI,
        modifiéeLe: dateModification.formatter(),
        modifiéePar: identifiantUtilisateur.formatter(),
      },
    };

    await this.publish(event);
  }

  async enregistrerChangement({
    identifiantProjet,
    typeNatureDeLExploitation,
    tauxPrévisionnelACI,
    dateChangement,
    identifiantUtilisateur,
    // pièceJustificative,
    // raison,
  }: EnregistrerChangementNatureDeLExploitationOptions) {
    this.lauréat.vérifierQueLeChangementEstPossible(
      'information-enregistrée',
      'natureDeLExploitation',
    );
    this.vérifierLaCohérenceDesDonnées(typeNatureDeLExploitation, tauxPrévisionnelACI);

    const event: ChangementNatureDeLExploitationEnregistréEvent = {
      type: 'ChangementNatureDeLExploitationEnregistré-V1',
      payload: {
        identifiantProjet: identifiantProjet.formatter(),
        typeNatureDeLExploitation: typeNatureDeLExploitation.formatter(),
        tauxPrévisionnelACI,
        enregistréLe: dateChangement.formatter(),
        enregistréPar: identifiantUtilisateur.formatter(),
        // raison,
        // pièceJustificative,
      },
    };

    await this.publish(event);
  }

  apply(event: NatureDeLExploitationEvent): void {
    match(event)
      .with(
        {
          type: 'NatureDeLExploitationImportée-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeOuModifiéeV1(event),
      )
      .with(
        {
          type: 'NatureDeLExploitationModifiée-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeOuModifiéeV1(event),
      )
      .with(
        {
          type: 'ChangementNatureDeLExploitationEnregistré-V1',
        },
        (event) => this.applyNatureDeLExploitationImportéeOuModifiéeV1(event),
      )
      .exhaustive();
  }

  private applyNatureDeLExploitationImportéeOuModifiéeV1({
    payload: { typeNatureDeLExploitation, tauxPrévisionnelACI },
  }:
    | NatureDeLExploitationImportéeEvent
    | NatureDeLExploitationModifiéeEvent
    | ChangementNatureDeLExploitationEnregistréEvent) {
    this.#typeNatureDeLExploitation =
      TypeDeNatureDeLExploitation.convertirEnValueType(typeNatureDeLExploitation);
    this.#tauxPrévisionnelACI = tauxPrévisionnelACI;
  }

  private vérifierLaCohérenceDesDonnées(
    typeNatureDeLExploitation: TypeDeNatureDeLExploitation.ValueType,
    tauxPrévisionnelACI?: number,
  ) {
    if (
      typeNatureDeLExploitation.estÉgaleÀ(
        TypeDeNatureDeLExploitation.venteAvecInjectionEnSurplus,
      ) &&
      tauxPrévisionnelACI === undefined
    ) {
      throw new TauxPrévisionnelACIRequisError();
    }

    if (
      typeNatureDeLExploitation.estÉgaleÀ(
        TypeDeNatureDeLExploitation.venteAvecInjectionEnTotalité,
      ) &&
      tauxPrévisionnelACI !== undefined
    ) {
      throw new TauxPrévisionnelACIEnTropError();
    }

    if (
      this.#typeNatureDeLExploitation.estÉgaleÀ(typeNatureDeLExploitation) &&
      this.#tauxPrévisionnelACI === tauxPrévisionnelACI
    ) {
      throw new NatureDeLExploitationIdentiqueError();
    }
  }
}
