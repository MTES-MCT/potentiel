import { Message, MessageHandler, mediator } from 'mediateur';

import { DateTime, Email } from '@potentiel-domain/common';
import { Joined, List, RangeOptions, Where } from '@potentiel-domain/entity';

import { ChangementNatureDeLExploitationEntity } from '../changementNatureDeLExploitation.entity';
import { GetProjetUtilisateurScope } from '../../../../getScopeProjetUtilisateur.port';
import { IdentifiantProjet, Lauréat } from '../../../..';
import { TypeDeNatureDeLExploitation } from '../..';

type ChangementNatureDeLExploitationItemReadModel = {
  identifiantProjet: IdentifiantProjet.ValueType;
  nomProjet: string;
  enregistréLe: DateTime.ValueType;
  typeNatureDeLExploitation: TypeDeNatureDeLExploitation.ValueType;
  tauxPrévisionnelACI?: number;
};

export type ListerChangementsNatureDeLExploitationReadModel = {
  items: ReadonlyArray<ChangementNatureDeLExploitationItemReadModel>;
  range: RangeOptions;
  total: number;
};

export type ListerChangementsNatureDeLExploitationQuery = Message<
  'Lauréat.NatureDeLExploitation.Query.ListerChangementsNatureDeLExploitation',
  {
    utilisateur: Email.RawType;
    appelOffre?: string;
    nomProjet?: string;
    range: RangeOptions;
  },
  ListerChangementsNatureDeLExploitationReadModel
>;

export type ListerChangementsNatureDeLExploitationDependencies = {
  list: List;
  getScopeProjetUtilisateur: GetProjetUtilisateurScope;
};

export const registerListerChangementsNatureDeLExploitationQuery = ({
  list,
  getScopeProjetUtilisateur,
}: ListerChangementsNatureDeLExploitationDependencies) => {
  const handler: MessageHandler<ListerChangementsNatureDeLExploitationQuery> = async ({
    appelOffre,
    nomProjet,
    utilisateur,
    range,
  }) => {
    const scope = await getScopeProjetUtilisateur(Email.convertirEnValueType(utilisateur));

    const demandes = await list<ChangementNatureDeLExploitationEntity, Lauréat.LauréatEntity>(
      'changement-nature-de-l-exploitation',
      {
        range,
        orderBy: {
          changement: { enregistréLe: 'descending' },
        },
        join: {
          entity: 'lauréat',
          on: 'identifiantProjet',
          where: {
            appelOffre: Where.equal(appelOffre),
            nomProjet: Where.like(nomProjet),
            localité: {
              région: scope.type === 'région' ? Where.matchAny(scope.régions) : undefined,
            },
          },
        },
        where: {
          identifiantProjet:
            scope.type === 'projet' ? Where.matchAny(scope.identifiantProjets) : undefined,
        },
      },
    );

    return {
      ...demandes,
      items: demandes.items.map(mapToReadModel),
    };
  };

  mediator.register(
    'Lauréat.NatureDeLExploitation.Query.ListerChangementsNatureDeLExploitation',
    handler,
  );
};

const mapToReadModel = (
  entity: ChangementNatureDeLExploitationEntity & Joined<Lauréat.LauréatEntity>,
): ChangementNatureDeLExploitationItemReadModel => ({
  identifiantProjet: IdentifiantProjet.convertirEnValueType(entity.identifiantProjet),
  nomProjet: entity.lauréat.nomProjet,
  enregistréLe: DateTime.convertirEnValueType(entity.changement.enregistréLe),
  typeNatureDeLExploitation: TypeDeNatureDeLExploitation.convertirEnValueType(
    entity.changement.typeNatureDeLExploitation,
  ),
  tauxPrévisionnelACI: entity.changement.tauxPrévisionnelACI,
});
