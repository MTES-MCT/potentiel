import { Message, MessageHandler, mediator } from 'mediateur';

import { Option } from '@potentiel-libraries/monads';
import { DateTime, Email } from '@potentiel-domain/common';
import { Find } from '@potentiel-domain/entity';
import { DocumentProjet } from '@potentiel-domain/document';

import { ChangementNatureDeLExploitationEntity } from '../changementNatureDeLExploitation.entity';
import { IdentifiantProjet } from '../../../..';
import { TypeDocumentNatureDeLExploitation } from '../..';

export type ConsulterChangementNatureDeLExploitationReadModel = {
  identifiantProjet: IdentifiantProjet.ValueType;

  changement: {
    enregistréPar: Email.ValueType;
    enregistréLe: DateTime.ValueType;
    typeNatureDeLExploitation: string;
    tauxPrévisionnelACI?: number;
    raison?: string;
    pièceJustificative?: DocumentProjet.ValueType;
  };
};

export type ConsulterChangementNatureDeLExploitationQuery = Message<
  'Lauréat.NatureDeLExploitation.Query.ConsulterChangementNatureDeLExploitation',
  {
    identifiantProjet: string;
    enregistréLe: string;
  },
  Option.Type<ConsulterChangementNatureDeLExploitationReadModel>
>;

export type ConsulterChangementNatureDeLExploitationDependencies = {
  find: Find;
};

export const registerConsulterChangementNatureDeLExploitationQuery = ({
  find,
}: ConsulterChangementNatureDeLExploitationDependencies) => {
  const handler: MessageHandler<ConsulterChangementNatureDeLExploitationQuery> = async ({
    identifiantProjet,
    enregistréLe,
  }) => {
    const identifiantProjetValueType = IdentifiantProjet.convertirEnValueType(identifiantProjet);

    const demandeChangementNatureDeLExploitation =
      await find<ChangementNatureDeLExploitationEntity>(
        `changement-nature-de-l-exploitation|${identifiantProjetValueType.formatter()}#${enregistréLe}`,
      );

    return Option.match(demandeChangementNatureDeLExploitation).some(mapToReadModel).none();
  };
  mediator.register(
    'Lauréat.NatureDeLExploitation.Query.ConsulterChangementNatureDeLExploitation',
    handler,
  );
};

export const mapToReadModel = (result: ChangementNatureDeLExploitationEntity) => {
  if (!result) {
    return Option.none;
  }

  return {
    identifiantProjet: IdentifiantProjet.convertirEnValueType(result.identifiantProjet),

    changement: {
      enregistréLe: DateTime.convertirEnValueType(result.changement.enregistréLe),
      enregistréPar: Email.convertirEnValueType(result.changement.enregistréPar),
      typeNatureDeLExploitation: result.changement.typeNatureDeLExploitation,
      tauxPrévisionnelACI: result.changement.tauxPrévisionnelACI,
      raison: result.changement.raison,
      pièceJustificative: result.changement.pièceJustificative
        ? DocumentProjet.convertirEnValueType(
            result.identifiantProjet,
            TypeDocumentNatureDeLExploitation.pièceJustificative.formatter(),
            DateTime.convertirEnValueType(result.changement.enregistréLe).formatter(),
            result.changement.pièceJustificative.format,
          )
        : undefined,
    },
  } satisfies ConsulterChangementNatureDeLExploitationReadModel;
};
