import { Message, MessageHandler, mediator } from 'mediateur';

import { DateTime, Email } from '@potentiel-domain/common';

import { IdentifiantProjet } from '../../../..';
import { TypeDeNatureDeLExploitation } from '../..';

import { EnregistrerChangementNatureDeLExploitationCommand } from './enregistrerChangementNatureDeLExploitation.command';

export type EnregistrerChangementNatureDeLExploitationUseCase = Message<
  'Lauréat.NatureDeLExploitation.UseCase.EnregistrerChangement',
  {
    identifiantProjetValue: string;
    identifiantUtilisateurValue: string;
    typeNatureDeLExploitationValue: string;
    tauxPrévisionnelACIValue?: number;
    dateChangementValue: string;
    // raisonValue?: string;
    // pièceJustificativeValue: {
    //   content: ReadableStream;
    //   format: string;
    // };
  }
>;

export const registerEnregistrerChangementNatureDeLExploitationUseCase = () => {
  const handler: MessageHandler<EnregistrerChangementNatureDeLExploitationUseCase> = async ({
    identifiantProjetValue,
    identifiantUtilisateurValue,
    typeNatureDeLExploitationValue,
    tauxPrévisionnelACIValue,
    dateChangementValue,
    // pièceJustificativeValue,
    // raisonValue,
  }) => {
    const identifiantProjet = IdentifiantProjet.convertirEnValueType(identifiantProjetValue);
    const identifiantUtilisateur = Email.convertirEnValueType(identifiantUtilisateurValue);
    const dateChangement = DateTime.convertirEnValueType(dateChangementValue);

    // const pièceJustificative = DocumentProjet.convertirEnValueType(
    //   identifiantProjet.formatter(),
    //   TypeDocumentNatureDeLExploitation.pièceJustificative.formatter(),
    //   dateChangement.formatter(),
    //   pièceJustificativeValue.format,
    // );

    await mediator.send<EnregistrerChangementNatureDeLExploitationCommand>({
      type: 'Lauréat.NatureDeLExploitation.Command.EnregistrerChangement',
      data: {
        identifiantProjet,
        identifiantUtilisateur,
        typeNatureDeLExploitation: TypeDeNatureDeLExploitation.convertirEnValueType(
          typeNatureDeLExploitationValue,
        ),
        tauxPrévisionnelACI: tauxPrévisionnelACIValue,
        dateChangement,
        // pièceJustificative,
        // raison: raisonValue,
      },
    });

    // await mediator.send<EnregistrerDocumentProjetCommand>({
    //   type: 'Document.Command.EnregistrerDocumentProjet',
    //   data: {
    //     content: pièceJustificativeValue.content,
    //     documentProjet: pièceJustificative,
    //   },
    // });
  };

  mediator.register('Lauréat.NatureDeLExploitation.UseCase.EnregistrerChangement', handler);
};
