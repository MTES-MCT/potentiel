import { Message, MessageHandler, mediator } from 'mediateur';

import { Option } from '@potentiel-libraries/monads';
import { Find } from '@potentiel-domain/entity';

import { IdentifiantProjet } from '../../..';
import { NatureDeLExploitationEntity } from '../natureDeLExploitation.entity';

export type ConsulterNatureDeLExploitationReadModel = {
  identifiantProjet: IdentifiantProjet.ValueType;
  natureDeLExploitation: string;
};

export type ConsulterNatureDeLExploitationQuery = Message<
  'Lauréat.NatureDeLExploitation.Query.ConsulterNatureDeLExploitation',
  {
    identifiantProjet: string;
  },
  Option.Type<ConsulterNatureDeLExploitationReadModel>
>;

export type ConsulterNatureDeLExploitationDependencies = {
  find: Find;
};

export const registerConsulterNatureDeLExploitationQuery = ({
  find,
}: ConsulterNatureDeLExploitationDependencies) => {
  const handler: MessageHandler<ConsulterNatureDeLExploitationQuery> = async ({
    identifiantProjet,
  }) => {
    const identifiantProjetValueType = IdentifiantProjet.convertirEnValueType(identifiantProjet);

    const natureDeLExploitation = await find<NatureDeLExploitationEntity>(
      `nature-de-l-exploitation|${identifiantProjetValueType.formatter()}`,
    );

    return Option.match(natureDeLExploitation).some(mapToReadModel).none();
  };
  mediator.register('Lauréat.NatureDeLExploitation.Query.ConsulterNatureDeLExploitation', handler);
};

export const mapToReadModel = ({
  identifiantProjet,
  natureDeLExploitation,
}: NatureDeLExploitationEntity) => ({
  identifiantProjet: IdentifiantProjet.convertirEnValueType(identifiantProjet),
  natureDeLExploitation,
});
