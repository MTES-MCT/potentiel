import { Then as Alors } from '@cucumber/cucumber';
import waitForExpect from 'wait-for-expect';
import { mediator } from 'mediateur';
import { expect } from 'chai';

import { Repr√©sentantL√©gal } from '@potentiel-domain/laureat';
import { mapToPlainObject } from '@potentiel-domain/core';

import { PotentielWorld } from '../../../../../potentiel.world';

Alors(
  /une demande de changement de repr√©sentant l√©gal du projet laur√©at devrait √™tre consultable/,
  async function (this: PotentielWorld) {
    return waitForExpect(async () => {
      const { identifiantProjet } = this.laur√©atWorld;

      const repr√©sentantL√©gal = await mediator.send<Repr√©sentantL√©gal.Repr√©sentantL√©galQuery>({
        type: 'Laur√©at.Repr√©sentantL√©gal.Query.ConsulterRepr√©sentantL√©gal',
        data: {
          identifiantProjet: identifiantProjet.formatter(),
        },
      });
      const actual = mapToPlainObject(repr√©sentantL√©gal);
      const expected = mapToPlainObject(
        this.laur√©atWorld.repr√©sentantL√©galWorld.mapToExpected(identifiantProjet),
      );
      console.log('ACTUAL ‚ù§Ô∏è‚Äçü©π', actual);
      console.log('FIXTURE ‚ù§Ô∏è‚Äçü©π', expect);
      actual.should.be.deep.equal(expected);

      // if (
      //   Option.isSome(repr√©sentantL√©gal) &&
      //   repr√©sentantL√©gal.demande &&
      //   this.laur√©atWorld.repr√©sentantL√©galWorld.demanderChangementRepr√©sentantL√©galFixture.a√ât√©Cr√©√©
      // ) {
      //   for (const existingPj of repr√©sentantL√©gal.demande.pi√®cesJustificatives) {
      //     for (const fixturePj of this.laur√©atWorld.repr√©sentantL√©galWorld
      //       .demanderChangementRepr√©sentantL√©galFixture.pi√®cesJustificatives) {
      //       const result = await mediator.send<ConsulterDocumentProjetQuery>({
      //         type: 'Document.Query.ConsulterDocumentProjet',
      //         data: {
      //           documentKey: existingPj.formatter(),
      //         },
      //       });

      //       const actualContent = await convertReadableStreamToString(result.content);
      //       const expectedContent = await convertReadableStreamToString(
      //         fixturePj.content ?? new ReadableStream(),
      //       );
      //       expect(actualContent).to.be.equal(expectedContent);
      //     }
      //   }
      // }
    });
  },
);
