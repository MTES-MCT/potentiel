import { Then as Alors } from '@cucumber/cucumber';
import { mediator } from 'mediateur';
import waitForExpect from 'wait-for-expect';

import { mapToPlainObject } from '@potentiel-domain/core';
import { Lauréat } from '@potentiel-domain/projet';

import { PotentielWorld } from '../../../../potentiel.world';

Alors(
  "la nature de l'exploitation du projet lauréat devrait être mise à jour",
  async function (this: PotentielWorld) {
    return waitForExpect(async () => {
      const { identifiantProjet } = this.lauréatWorld;

      const natureDeLExploitation =
        await mediator.send<Lauréat.NatureDeLExploitation.NatureDeLExploitationQuery>({
          type: 'Lauréat.NatureDeLExploitation.Query.ConsulterNatureDeLExploitation',
          data: {
            identifiantProjet: identifiantProjet.formatter(),
          },
        });

      const actual = mapToPlainObject(natureDeLExploitation);
      const expected = mapToPlainObject(
        this.lauréatWorld.natureDeLExploitationWorld.mapToExpected(identifiantProjet),
      );

      actual.should.be.deep.equal(expected);
    });
  },
);
