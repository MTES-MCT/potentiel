import { When as Quand } from '@cucumber/cucumber';
import { mediator } from 'mediateur';

import { IdentifiantProjet, Lauréat } from '@potentiel-domain/projet';

import { PotentielWorld } from '../../../../potentiel.world';

Quand(
  "le DGEC validateur modifie la nature d'exploitation du projet lauréat",
  async function (this: PotentielWorld) {
    try {
      const { identifiantProjet } = this.lauréatWorld;

      await modifierNatureDeLExploitation.call(this, identifiantProjet);
    } catch (error) {
      this.error = error as Error;
    }
  },
);

Quand(
  "le DGEC validateur modifie la nature d'exploitation avec une valeur identique pour le projet lauréat",
  async function (this: PotentielWorld) {
    try {
      await modifierNatureDeLExploitation.call(
        this,
        this.lauréatWorld.identifiantProjet,
        this.candidatureWorld.importerCandidature.dépôtValue.natureDeLExploitation,
      );
    } catch (error) {
      this.error = error as Error;
    }
  },
);

export async function modifierNatureDeLExploitation(
  this: PotentielWorld,
  identifiantProjet: IdentifiantProjet.ValueType,
  natureDeLExploitationValue?: string,
) {
  const { modifiéeLe, modifiéePar, natureDeLExploitation } =
    this.lauréatWorld.natureDeLExploitationWorld.modifierNatureDeLExploitationFixture.créer({
      modifiéePar: this.utilisateurWorld.adminFixture.email,
      ...(natureDeLExploitationValue && { natureDeLExploitation: natureDeLExploitationValue }),
    });

  await mediator.send<Lauréat.NatureDeLExploitation.ModifierNatureDeLExploitationUseCase>({
    type: 'Lauréat.NatureDeLExploitation.UseCase.ModifierNatureDeLExploitation',
    data: {
      natureDeLExploitationValue: natureDeLExploitation,
      dateModificationValue: modifiéeLe,
      identifiantUtilisateurValue: modifiéePar,
      identifiantProjetValue: identifiantProjet.formatter(),
    },
  });
}
