import { DataTable, When as Quand } from '@cucumber/cucumber';
import { mediator } from 'mediateur';

import { IdentifiantProjet, Lauréat } from '@potentiel-domain/projet';

import { PotentielWorld } from '../../../../potentiel.world';

Quand(
  "le DGEC validateur modifie la nature de l'exploitation du projet lauréat avec :",
  async function (this: PotentielWorld, dataTable: DataTable) {
    try {
      const exemple = dataTable.rowsHash();
      const { identifiantProjet } = this.lauréatWorld;

      await modifierNatureDeLExploitation.call(this, identifiantProjet, {
        typeNatureDeLExploitation: exemple["type de nature de l'exploitation"],
        tauxPrévisionnelACI: exemple['taux prévisionnel aci']
          ? Number(exemple['taux prévisionnel aci'])
          : undefined,
      });
    } catch (error) {
      this.error = error as Error;
    }
  },
);

Quand(
  "le DGEC validateur modifie la nature de l'exploitation avec une valeur identique pour le projet lauréat",
  async function (this: PotentielWorld) {
    try {
      await modifierNatureDeLExploitation.call(
        this,
        this.lauréatWorld.identifiantProjet,
        this.candidatureWorld.importerCandidature.dépôtValue.natureDeLExploitation,
      );
    } catch (error) {
      this.error = error as Error;
    }
  },
);

Quand(
  "le porteur enregistre un changement de nature de l'exploitation du projet lauréat avec :",
  async function (this: PotentielWorld, dataTable: DataTable) {
    try {
      const exemple = dataTable.rowsHash();
      const { identifiantProjet } = this.lauréatWorld;

      await enregistrerChangement.call(this, identifiantProjet, {
        typeNatureDeLExploitation: exemple["type de nature de l'exploitation"],
        tauxPrévisionnelACI: exemple['taux prévisionnel aci']
          ? Number(exemple['taux prévisionnel aci'])
          : undefined,
      });
    } catch (error) {
      this.error = error as Error;
    }
  },
);

Quand(
  "le porteur enregistre un changement de nature de l'exploitation du projet lauréat avec une valeur identique",
  async function (this: PotentielWorld) {
    try {
      const { identifiantProjet } = this.lauréatWorld;

      await enregistrerChangement.call(this, identifiantProjet, {
        typeNatureDeLExploitation:
          this.candidatureWorld.importerCandidature.dépôtValue.natureDeLExploitation
            ?.typeNatureDeLExploitation,
        tauxPrévisionnelACI:
          this.candidatureWorld.importerCandidature.dépôtValue.natureDeLExploitation
            ?.tauxPrévisionnelACI,
      });
    } catch (error) {
      this.error = error as Error;
    }
  },
);

export async function modifierNatureDeLExploitation(
  this: PotentielWorld,
  identifiantProjet: IdentifiantProjet.ValueType,
  natureDeLExploitation?: {
    typeNatureDeLExploitation: string;
    tauxPrévisionnelACI?: number;
  },
) {
  const { modifiéeLe, modifiéePar, typeNatureDeLExploitation, tauxPrévisionnelACI } =
    this.lauréatWorld.natureDeLExploitationWorld.modifierNatureDeLExploitationFixture.créer({
      modifiéePar: this.utilisateurWorld.adminFixture.email,
      ...(natureDeLExploitation && {
        typeNatureDeLExploitation: natureDeLExploitation.typeNatureDeLExploitation,
        tauxPrévisionnelACI: natureDeLExploitation.tauxPrévisionnelACI,
      }),
    });

  await mediator.send<Lauréat.NatureDeLExploitation.ModifierNatureDeLExploitationUseCase>({
    type: 'Lauréat.NatureDeLExploitation.UseCase.ModifierNatureDeLExploitation',
    data: {
      natureDeLExploitationValue: {
        typeNatureDeLExploitation,
        tauxPrévisionnelACI,
      },
      dateModificationValue: modifiéeLe,
      identifiantUtilisateurValue: modifiéePar,
      identifiantProjetValue: identifiantProjet.formatter(),
    },
  });
}

async function enregistrerChangement(
  this: PotentielWorld,
  identifiantProjet: IdentifiantProjet.ValueType,
  natureDeLExploitation?: {
    typeNatureDeLExploitation?: string;
    tauxPrévisionnelACI?: number;
  },
) {
  const { enregistréLe, enregistréPar, typeNatureDeLExploitation, tauxPrévisionnelACI } =
    this.lauréatWorld.natureDeLExploitationWorld.enregistrerChangementNatureDeLExploitationFixture.créer(
      {
        enregistréPar: this.utilisateurWorld.adminFixture.email,
        ...(natureDeLExploitation && {
          typeNatureDeLExploitation: natureDeLExploitation.typeNatureDeLExploitation,
          tauxPrévisionnelACI: natureDeLExploitation.tauxPrévisionnelACI,
        }),
      },
    );

  await mediator.send<Lauréat.NatureDeLExploitation.EnregistrerChangementNatureDeLExploitationUseCase>(
    {
      type: 'Lauréat.NatureDeLExploitation.UseCase.EnregistrerChangement',
      data: {
        natureDeLExploitationValue: {
          typeNatureDeLExploitation,
          tauxPrévisionnelACI,
        },
        dateChangementValue: enregistréLe,
        identifiantUtilisateurValue: enregistréPar,
        identifiantProjetValue: identifiantProjet.formatter(),
      },
    },
  );
}
