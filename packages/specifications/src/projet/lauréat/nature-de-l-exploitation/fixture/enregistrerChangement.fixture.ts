import { faker } from '@faker-js/faker';

import { Lauréat } from '@potentiel-domain/projet';

import { AbstractFixture } from '../../../../fixture';

interface EnregistrerChangement {
  readonly enregistréLe: string;
  readonly enregistréPar: string;
  readonly typeNatureDeLExploitation: string;
  readonly tauxPrévisionnelACI?: number;
}

export class EnregistrerChangementFixture
  extends AbstractFixture<EnregistrerChangement>
  implements EnregistrerChangement
{
  #enregistréLe!: string;

  get enregistréLe(): string {
    return this.#enregistréLe;
  }

  #enregistréPar!: string;

  get enregistréPar(): string {
    return this.#enregistréPar;
  }

  #typeNatureDeLExploitation!: string;

  get typeNatureDeLExploitation(): string {
    return this.#typeNatureDeLExploitation;
  }

  #tauxPrévisionnelACI?: number;
  get tauxPrévisionnelACI() {
    return this.#tauxPrévisionnelACI;
  }

  créer(partialData?: Partial<EnregistrerChangement>): Readonly<EnregistrerChangement> {
    const typeNatureDeLExploitation = faker.helpers.arrayElement(
      Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types,
    );

    const fixture: EnregistrerChangement = {
      enregistréLe: faker.date.recent().toISOString(),
      enregistréPar: faker.internet.email(),
      typeNatureDeLExploitation,
      tauxPrévisionnelACI:
        typeNatureDeLExploitation === 'vente-avec-injection-du-surplus'
          ? faker.number.int({ min: 0, max: 100 })
          : undefined,
      ...partialData,
    };

    this.#enregistréLe = fixture.enregistréLe;
    this.#enregistréPar = fixture.enregistréPar;
    this.#typeNatureDeLExploitation = fixture.typeNatureDeLExploitation;
    this.#tauxPrévisionnelACI = fixture.tauxPrévisionnelACI;
    this.aÉtéCréé = true;

    return fixture;
  }
}
