import { faker } from '@faker-js/faker';

import { Lauréat } from '@potentiel-domain/projet';

import { AbstractFixture } from '../../../../fixture';

interface ModifierNatureDeLExploitation {
  readonly modifiéeLe: string;
  readonly modifiéePar: string;
  readonly type: string;
  readonly tauxPrévisionnelACI?: number;
}

export class ModifierNatureDeLExploitationFixture
  extends AbstractFixture<ModifierNatureDeLExploitation>
  implements ModifierNatureDeLExploitation
{
  #modifiéeLe!: string;

  get modifiéeLe(): string {
    return this.#modifiéeLe;
  }

  #modifiéePar!: string;

  get modifiéePar(): string {
    return this.#modifiéePar;
  }

  #type!: string;

  get type(): string {
    return this.#type;
  }

  #tauxPrévisionnelACI?: number;
  get tauxPrévisionnelACI() {
    return this.#tauxPrévisionnelACI;
  }

  créer(
    partialData?: Partial<ModifierNatureDeLExploitation>,
  ): Readonly<ModifierNatureDeLExploitation> {
    const type = faker.helpers.arrayElement(
      Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.types,
    );

    const fixture: ModifierNatureDeLExploitation = {
      modifiéeLe: faker.date.recent().toISOString(),
      modifiéePar: faker.internet.email(),
      type,
      tauxPrévisionnelACI:
        type === 'vente-avec-injection-du-surplus'
          ? faker.number.int({ min: 0, max: 100 })
          : undefined,
      ...partialData,
    };

    this.#modifiéeLe = fixture.modifiéeLe;
    this.#modifiéePar = fixture.modifiéePar;
    this.#type = fixture.type;
    this.#tauxPrévisionnelACI = fixture.tauxPrévisionnelACI;

    this.aÉtéCréé = true;
    return fixture;
  }
}
