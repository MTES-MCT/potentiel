import { Lauréat } from '@potentiel-domain/projet';
import { IdentifiantProjet } from '@potentiel-domain/projet';
import { Option } from '@potentiel-libraries/monads';

import { LauréatWorld } from '../lauréat.world';

import { ModifierNatureDeLExploitationFixture } from './fixture/modifierNatureDeLExploitation.fixture';
import { EnregistrerChangementFixture } from './fixture/enregistrerChangement.fixture';

export class NatureDeLExploitationWorld {
  #modifierNatureDeLExploitationFixture: ModifierNatureDeLExploitationFixture;
  get modifierNatureDeLExploitationFixture() {
    return this.#modifierNatureDeLExploitationFixture;
  }

  #enregistrerChangementNatureDeLExploitationFixture: EnregistrerChangementFixture;
  get enregistrerChangementNatureDeLExploitationFixture() {
    return this.#enregistrerChangementNatureDeLExploitationFixture;
  }

  constructor(public readonly lauréatWorld: LauréatWorld) {
    this.#modifierNatureDeLExploitationFixture = new ModifierNatureDeLExploitationFixture();
    this.#enregistrerChangementNatureDeLExploitationFixture = new EnregistrerChangementFixture();
  }

  mapExempleToFixtureValues(exemple: Record<string, string>) {
    return {
      typeNatureDeLExploitation: exemple["type de nature de l'exploitation"],
      tauxPrévisionnelACI: exemple['taux prévisionnel aci']
        ? Number(exemple['taux prévisionnel aci'])
        : undefined,
    };
  }

  mapToExpected(identifiantProjet: IdentifiantProjet.ValueType) {
    const natureDeLExploitationALaCandidature =
      this.lauréatWorld.candidatureWorld.importerCandidature.dépôtValue.natureDeLExploitation;

    if (!natureDeLExploitationALaCandidature) {
      return Option.none;
    }

    const expectedNatureDeLExploitation = this.#enregistrerChangementNatureDeLExploitationFixture
      .aÉtéCréé
      ? {
          typeNatureDeLExploitation:
            this.#enregistrerChangementNatureDeLExploitationFixture.typeNatureDeLExploitation,
          tauxPrévisionnelACI:
            this.#enregistrerChangementNatureDeLExploitationFixture.tauxPrévisionnelACI,
        }
      : this.#modifierNatureDeLExploitationFixture.aÉtéCréé
        ? {
            typeNatureDeLExploitation:
              this.#modifierNatureDeLExploitationFixture.typeNatureDeLExploitation,
            tauxPrévisionnelACI: this.#modifierNatureDeLExploitationFixture.tauxPrévisionnelACI,
          }
        : natureDeLExploitationALaCandidature;

    const expected: Lauréat.NatureDeLExploitation.ConsulterNatureDeLExploitationReadModel = {
      identifiantProjet,
      natureDeLExploitation: {
        typeNatureDeLExploitation:
          Lauréat.NatureDeLExploitation.TypeDeNatureDeLExploitation.convertirEnValueType(
            expectedNatureDeLExploitation.typeNatureDeLExploitation,
          ),
        tauxPrévisionnelACI: expectedNatureDeLExploitation.tauxPrévisionnelACI,
      },
    };

    return expected;
  }
}
