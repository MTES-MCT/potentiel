import { Then as Alors, DataTable } from '@cucumber/cucumber';
import { assert, expect } from 'chai';
import { mediator } from 'mediateur';
import waitForExpect from 'wait-for-expect';

import { ConsulterDocumentProjetQuery } from '@potentiel-domain/document';
import { GarantiesFinanci√®res } from '@potentiel-domain/laureat';
import { Option } from '@potentiel-libraries/monads';
import { IdentifiantProjet } from '@potentiel-domain/common';

import { convertReadableStreamToString } from '../../../../../helpers/convertReadableToString';
import { PotentielWorld } from '../../../../../potentiel.world';
import { getD√©p√¥tGarantiesFinanci√®resData } from '../../helpers';
import { sleep } from '../../../../../helpers/sleep';

Alors(
  'le d√©p√¥t de garanties financi√®res devrait √™tre consultable pour le projet {string} avec :',
  async function (this: PotentielWorld, nomProjet: string, dataTable: DataTable) {
    const exemple = dataTable.rowsHash();
    const { identifiantProjet } = this.laur√©atWorld.rechercherLaur√©atFixture(nomProjet);

    const {
      typeValue,
      date√âch√©anceValue,
      dateConstitutionValue,
      attestationValue,
      soumisLeValue,
      derni√®reMise√ÄJour,
    } = getD√©p√¥tGarantiesFinanci√®resData(identifiantProjet, exemple);

    // ASSERT ON READ MODEL
    await waitForExpect(async () => {
      const actualReadModel = await getD√©p√¥tEnCoursGarantiesFinanci√®res(identifiantProjet);

      const d√©p√¥tEnCours = actualReadModel.d√©p√¥t;

      expect(d√©p√¥tEnCours).not.to.be.undefined;
      assert(d√©p√¥tEnCours);

      expect(d√©p√¥tEnCours.type.type).to.deep.equal(typeValue);
      expect(d√©p√¥tEnCours.dateConstitution.date).to.deep.equal(new Date(dateConstitutionValue));
      expect(d√©p√¥tEnCours.soumisLe.date).to.deep.equal(new Date(soumisLeValue));
      expect(d√©p√¥tEnCours.derni√®reMise√ÄJour.date.date).to.deep.equal(
        new Date(derni√®reMise√ÄJour.date),
      );
      expect(d√©p√¥tEnCours.derni√®reMise√ÄJour.par.formatter()).to.deep.equal(derni√®reMise√ÄJour.par);

      if (d√©p√¥tEnCours.date√âch√©ance && date√âch√©anceValue) {
        expect(d√©p√¥tEnCours.date√âch√©ance).not.to.be.undefined;
        expect(d√©p√¥tEnCours.date√âch√©ance.date).to.deep.equal(new Date(date√âch√©anceValue!));
      }

      // ASSERT ON FILE
      expect(d√©p√¥tEnCours.attestation).not.to.be.undefined;
      expect(d√©p√¥tEnCours.attestation.format).to.deep.equal(attestationValue.format);

      const file = await mediator.send<ConsulterDocumentProjetQuery>({
        type: 'Document.Query.ConsulterDocumentProjet',
        data: {
          documentKey: d√©p√¥tEnCours.attestation.formatter(),
        },
      });

      const actualContent = await convertReadableStreamToString(file.content);
      actualContent.should.be.equal(attestationValue.content);
    });
  },
);

Alors(
  'il ne devrait pas y avoir de d√©p√¥t de garanties financi√®res pour le projet {string}',
  async function (this: PotentielWorld, nomProjet: string) {
    const { identifiantProjet } = this.laur√©atWorld.rechercherLaur√©atFixture(nomProjet);

    await waitForExpect(async () => {
      const d√©tailD√©p√¥t =
        await mediator.send<GarantiesFinanci√®res.ConsulterD√©p√¥tEnCoursGarantiesFinanci√®resQuery>({
          type: 'Laur√©at.GarantiesFinanci√®res.Query.ConsulterD√©p√¥tEnCoursGarantiesFinanci√®res',
          data: {
            identifiantProjetValue: identifiantProjet.formatter(),
          },
        });
      expect(Option.isNone(d√©tailD√©p√¥t)).to.be.true;

      await sleep(100);

      const listeD√©p√¥ts =
        await mediator.send<GarantiesFinanci√®res.ListerD√©p√¥tsEnCoursGarantiesFinanci√®resQuery>({
          type: 'Laur√©at.GarantiesFinanci√®res.Query.ListerD√©p√¥tsEnCoursGarantiesFinanci√®res',
          data: {
            utilisateur: {
              r√¥le: 'admin',
            },
          },
        });

      expect(listeD√©p√¥ts.items).to.be.empty;
    });
  },
);

const getD√©p√¥tEnCoursGarantiesFinanci√®res = async (
  identifiantProjet: IdentifiantProjet.ValueType,
) => {
  const actualReadModel =
    await mediator.send<GarantiesFinanci√®res.ConsulterD√©p√¥tEnCoursGarantiesFinanci√®resQuery>({
      type: 'Laur√©at.GarantiesFinanci√®res.Query.ConsulterD√©p√¥tEnCoursGarantiesFinanci√®res',
      data: {
        identifiantProjetValue: identifiantProjet.formatter(),
      },
    });

  console.log('actualReadModel üë®üèº‚Äçü¶±', actualReadModel);

  if (Option.isNone(actualReadModel)) {
    throw new Error(
      `Le read model du d√©p√¥t en cours de garanties financi√®res du projet ${identifiantProjet.formatter()} n'existe pas`,
    );
  }

  return actualReadModel;
};
