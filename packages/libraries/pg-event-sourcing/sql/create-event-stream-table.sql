CREATE TABLE "EVENT_STREAM" (
  "streamId" VARCHAR NOT NULL,
  "createdAt" VARCHAR NOT NULL,
  "type" VARCHAR NOT NULL,
  "version" INTEGER NOT NULL,
  "payload" JSONB,
  PRIMARY KEY ("streamId", "createdAt", "version")
);

CREATE INDEX ON "EVENT_STREAM" ("streamId");

CREATE FUNCTION notify_new_event() RETURNS TRIGGER AS
$trigger$
  BEGIN
      PERFORM pg_notify('new_event', row_to_json(NEW)::text);
      RETURN NULL;
  END;
$trigger$
  LANGUAGE plpgsql VOLATILE
  COST 100;

CREATE TRIGGER notify_new_event
AFTER INSERT
ON "EVENT_STREAM"
FOR EACH ROW
EXECUTE PROCEDURE notify_new_event();

CREATE FUNCTION THROW_WHEN_TYRING_TO_UPDATE_EVENT_STREAM() RETURNS VOID AS
$$
  BEGIN
      RAISE EXCEPTION 'Event Stream can not be updated';
  END;
$$ LANGUAGE plpgsql VOLATILE;

CREATE RULE "PREVENT_DELETE_ON_EVENT_STREAM" AS ON DELETE TO "EVENT_STREAM" DO INSTEAD SELECT THROW_WHEN_TYRING_TO_UPDATE_EVENT_STREAM();
CREATE RULE "PREVENT_UPDATE_ON_EVENT_STREAM" AS ON UPDATE TO "EVENT_STREAM" DO INSTEAD SELECT THROW_WHEN_TYRING_TO_UPDATE_EVENT_STREAM();